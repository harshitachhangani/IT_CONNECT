<<<<<<< HEAD
[{"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\index.js":"1","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\App.js":"2","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Logout.js":"3","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Login.js":"4","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Applications.js":"5","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Profile.js":"6","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Signup.js":"7","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js":"8","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js":"9","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js":"10","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"11","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js":"12","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js":"13","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Navbar.js":"14","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Welcome.js":"15","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Home.js":"16","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js":"17","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js":"18","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js":"19","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js":"20","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\apiList.js":"21","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Footer.js":"22","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Feedback.js":"23","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Clients.js":"24","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\constants\\index.js":"25","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\assets\\index.js":"26","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\index.js":"27","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\App.js":"28","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Login.js":"29","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Navbar.js":"30","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Welcome.js":"31","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Logout.js":"32","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Applications.js":"33","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Signup.js":"34","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js":"35","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Profile.js":"36","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Home.js":"37","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js":"38","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js":"39","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"40","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js":"41","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js":"42","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js":"43","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\apiList.js":"44","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js":"45","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Feedback.js":"46","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js":"47","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Clients.js":"48","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Footer.js":"49","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js":"50","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\assets\\index.js":"51","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\constants\\index.js":"52"},{"size":230,"mtime":1694022269055,"results":"53","hashOfConfig":"54"},{"size":3507,"mtime":1694076466580,"results":"55","hashOfConfig":"54"},{"size":509,"mtime":1694022268915,"results":"56","hashOfConfig":"54"},{"size":4107,"mtime":1694081387042,"results":"57","hashOfConfig":"54"},{"size":10515,"mtime":1694082652875,"results":"58","hashOfConfig":"54"},{"size":10765,"mtime":1694083036247,"results":"59","hashOfConfig":"54"},{"size":14123,"mtime":1694022268918,"results":"60","hashOfConfig":"54"},{"size":23207,"mtime":1694022268921,"results":"61","hashOfConfig":"54"},{"size":5315,"mtime":1694091908650,"results":"62","hashOfConfig":"54"},{"size":8386,"mtime":1694022268921,"results":"63","hashOfConfig":"54"},{"size":21771,"mtime":1694506034931,"results":"64","hashOfConfig":"54"},{"size":174,"mtime":1694022269060,"results":"65","hashOfConfig":"54"},{"size":523,"mtime":1694022269059,"results":"66","hashOfConfig":"54"},{"size":3623,"mtime":1694114306677,"results":"67","hashOfConfig":"54"},{"size":10805,"mtime":1694114306678,"results":"68","hashOfConfig":"54"},{"size":21963,"mtime":1694114306676,"results":"69","hashOfConfig":"54"},{"size":27021,"mtime":1694114258148,"results":"70","hashOfConfig":"54"},{"size":1704,"mtime":1694022269059,"results":"71","hashOfConfig":"54"},{"size":1210,"mtime":1694022269056,"results":"72","hashOfConfig":"54"},{"size":3231,"mtime":1694022269058,"results":"73","hashOfConfig":"54"},{"size":521,"mtime":1694022269060,"results":"74","hashOfConfig":"54"},{"size":1692,"mtime":1694114306675,"results":"75","hashOfConfig":"54"},{"size":762,"mtime":1694114306673,"results":"76","hashOfConfig":"54"},{"size":592,"mtime":1694114306672,"results":"77","hashOfConfig":"54"},{"size":4573,"mtime":1694114306682,"results":"78","hashOfConfig":"54"},{"size":1234,"mtime":1694114306659,"results":"79","hashOfConfig":"54"},{"size":230,"mtime":1697397920114,"results":"80","hashOfConfig":"81"},{"size":3507,"mtime":1697397919912,"results":"82","hashOfConfig":"81"},{"size":4480,"mtime":1699722182901,"results":"83","hashOfConfig":"81"},{"size":7551,"mtime":1699881317600,"results":"84","hashOfConfig":"81"},{"size":10061,"mtime":1699880499493,"results":"85","hashOfConfig":"81"},{"size":509,"mtime":1697397919964,"results":"86","hashOfConfig":"81"},{"size":10645,"mtime":1699716997477,"results":"87","hashOfConfig":"81"},{"size":10640,"mtime":1699721592474,"results":"88","hashOfConfig":"81"},{"size":8926,"mtime":1699721334142,"results":"89","hashOfConfig":"81"},{"size":10765,"mtime":1699712263843,"results":"90","hashOfConfig":"81"},{"size":21577,"mtime":1699710342746,"results":"91","hashOfConfig":"81"},{"size":23207,"mtime":1699717820251,"results":"92","hashOfConfig":"81"},{"size":26933,"mtime":1699718609230,"results":"93","hashOfConfig":"81"},{"size":21682,"mtime":1699708516121,"results":"94","hashOfConfig":"81"},{"size":4491,"mtime":1699714584312,"results":"95","hashOfConfig":"81"},{"size":523,"mtime":1697397920117,"results":"96","hashOfConfig":"81"},{"size":174,"mtime":1697397920119,"results":"97","hashOfConfig":"81"},{"size":521,"mtime":1697397920118,"results":"98","hashOfConfig":"81"},{"size":1704,"mtime":1697397920118,"results":"99","hashOfConfig":"81"},{"size":762,"mtime":1697397919960,"results":"100","hashOfConfig":"81"},{"size":1210,"mtime":1697397920116,"results":"101","hashOfConfig":"81"},{"size":592,"mtime":1697397919958,"results":"102","hashOfConfig":"81"},{"size":1692,"mtime":1697397919962,"results":"103","hashOfConfig":"81"},{"size":3231,"mtime":1697397920117,"results":"104","hashOfConfig":"81"},{"size":1234,"mtime":1697397919939,"results":"105","hashOfConfig":"81"},{"size":4573,"mtime":1697397920113,"results":"106","hashOfConfig":"81"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"n7ef1p",{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"109"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"109"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"109"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"109"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"109"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"109"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"109"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"109"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"109"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"109"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"109"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"109"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"1b622lb",{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"176"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"176"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"176"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"176"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"176"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"176"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"176"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"176"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"176"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"176"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"176"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"176"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"176"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\index.js",[],["236","237"],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\App.js",["238","239"],"import { createContext, useState } from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport Login from \"./component/Login\";\r\nimport Logout from \"./component/Logout\";\r\nimport Signup from \"./component/Signup\";\r\nimport Home from \"./component/Home\";\r\nimport Applications from \"./component/Applications\";\r\nimport Profile from \"./component/Profile\";\r\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\r\nimport MyJobs from \"./component/recruiter/MyJobs\";\r\nimport JobApplications from \"./component/recruiter/JobApplications\";\r\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\r\nimport RecruiterProfile from \"./component/recruiter/Profile\";\r\nimport MessagePopup from \"./lib/MessagePopup\";\r\nimport isAuth, { userType } from \"./lib/isAuth\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme) => ({\r\n  body: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    minHeight: \"98vh\",\r\n    paddingTop: \"64px\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport const SetPopupContext = createContext();\r\nconst TITLE =\"IT CONNECT\"\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [popup, setPopup] = useState({\r\n    open: false,\r\n    severity: \"\",\r\n    message: \"\",\r\n  });\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      \r\n      <SetPopupContext.Provider value={setPopup}>\r\n      \r\n        <Grid container direction=\"column\">\r\n          <Grid item xs>\r\n            <Navbar />\r\n          </Grid>\r\n          <Grid item className={classes.body}>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Welcome />\r\n              </Route>\r\n              <Route exact path=\"/login\">\r\n                <Login />\r\n              </Route>\r\n              <Route exact path=\"/signup\">\r\n                <Signup />\r\n              </Route>\r\n              <Route exact path=\"/logout\">\r\n                <Logout />\r\n              </Route>\r\n              <Route exact path=\"/home\">\r\n                <Home />\r\n              </Route>\r\n              <Route exact path=\"/applications\">\r\n                <Applications />\r\n              </Route>\r\n             \r\n              <Route exact path=\"/profile\">\r\n                {userType() === \"recruiter\" ? (\r\n                  <RecruiterProfile />\r\n                ) : (\r\n                  <Profile />\r\n                )}\r\n              </Route>\r\n              <Route exact path=\"/addjob\">\r\n                <CreateJobs />\r\n              </Route>\r\n              <Route exact path=\"/myjobs\">\r\n                <MyJobs />\r\n              </Route>\r\n              <Route exact path=\"/job/applications/:jobId\">\r\n                <JobApplications />\r\n              </Route>\r\n              <Route exact path=\"/employees\">\r\n                <AcceptedApplicants />\r\n              </Route>\r\n              <Route>\r\n                <ErrorPage />\r\n              </Route>\r\n            </Switch>\r\n          </Grid>\r\n        </Grid>\r\n        <MessagePopup\r\n          open={popup.open}\r\n          setOpen={(status) =>\r\n            setPopup({\r\n              ...popup,\r\n              open: status,\r\n            })\r\n          }\r\n          severity={popup.severity}\r\n          message={popup.message}\r\n        />\r\n      </SetPopupContext.Provider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Logout.js",["240"],"import { useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nconst Logout = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"type\");\r\n    setPopup({\r\n      open: true,\r\n      severity: \"success\",\r\n      message: \"Logged out successfully\",\r\n    });\r\n  }, []);\r\n  return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default Logout;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Login.js",["241","242"],"import { useContext, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../index.css\"\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nimport img from './login-img.png';\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  inputBox: {\r\n    width: \"300px\",\r\n  },\r\n  submitButton: {\r\n    width: \"300px\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [loginDetails, setLoginDetails] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setLoginDetails({\r\n      ...loginDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\r\n      return inputErrorHandler[obj].error;\r\n    });\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.login, loginDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Grid container direction=\"row\" >\r\n      <div style={{alignItems:\"center\", marginLeft:\"15%\",marginTop:\"\"}}>\r\n        <img src={img}\r\n          width=\"400px\" height=\"450px\" ></img>\r\n      </div>\r\n    <Paper elevation={3} className={classes.body}>\r\n      \r\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n      \r\n        <Grid item>\r\n          <Typography variant=\"h3\" component=\"h2\" style={{color:\"#3f51b5\",fontWeight:\"bold\"}}>\r\n            Welcome back, Login!\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <EmailInput\r\n            label=\"Email\"\r\n            value={loginDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <PasswordInput\r\n            label=\"Password\"\r\n            value={loginDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => handleLogin()}\r\n            className={classes.submitButton}\r\n            style={{borderRadius:\"8px\",width:\"130px\",height:\"50px\"}}\r\n          >\r\n            Login\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Applications.js",["243","244","245","246","247","248","249","250"],"import {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport { SetPopupContext } from \"../App\";\r\nimport apiList from \"../lib/apiList\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\",\r\n    transition: \"transform 0.2s ease-in-out\",\r\n    \"&:hover\": {\r\n      transform: \"scale(1.02)\",\r\n    },\r\n  },\r\n  jobTitle: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.25rem\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  statusBlock: {\r\n    width: \"fit-content\",\r\n    padding: \"5px 10px\",\r\n    borderRadius: \"5px\",\r\n    color: \"white\",\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  dateInfo: {\r\n    fontSize: \"0.875rem\",\r\n    color: \"#888\",\r\n    marginTop: \"5px\",\r\n  },\r\n  chip: {\r\n    marginRight: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  rateButton: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  modalPaper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    outline: \"none\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  modalCloseButton: {\r\n    position: \"absolute\",\r\n    top: \"10px\",\r\n    right: \"10px\",\r\n  },\r\n  ratingLabel: {\r\n    fontSize: \"1rem\",\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  ratingSlider: {\r\n    width: \"80%\",\r\n  },\r\n  rateSubmitButton: {\r\n    marginTop: \"10px\",\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\" className={classes.jobTitle}>\r\n              {application.job.title}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Posted By: {application.recruiter.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">Role: {application.job.jobType}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Salary: &#8377; {application.job.salary} per month\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Duration:{\" \"}\r\n              {application.job.duration !== 0\r\n                ? `${application.job.duration} month`\r\n                : `Flexible`}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <div>\r\n              {application.job.skillsets.map((skill) => (\r\n                <Chip\r\n                  key={skill}\r\n                  label={skill}\r\n                  className={classes.chip}\r\n                  variant=\"outlined\"\r\n                />\r\n              ))}\r\n            </div>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n              Applied On: {appliedOn.toLocaleDateString()}\r\n            </Typography>\r\n            {application.status === \"accepted\" ||\r\n            application.status === \"finished\" ? (\r\n              <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n                Joined On: {joinedOn.toLocaleDateString()}\r\n              </Typography>\r\n            ) : null}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item xs>\r\n            <Paper\r\n              className={classes.statusBlock}\r\n              style={{\r\n                background: colorSet[application.status],\r\n                color: \"#ffffff\",\r\n              }}\r\n            >\r\n              {application.status}\r\n            </Paper>\r\n          </Grid>\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.rateButton}\r\n                onClick={() => {\r\n                  fetchRating();\r\n                  setOpen(true);\r\n                }}\r\n              >\r\n                Rate Job\r\n              </Button>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.modal}>\r\n        <Paper className={classes.modalPaper}>\r\n          <IconButton\r\n            edge=\"end\"\r\n            color=\"inherit\"\r\n            onClick={handleClose}\r\n            className={classes.modalCloseButton}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.ratingLabel}>\r\n            Rate this Job\r\n          </Typography>\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            className={classes.ratingSlider}\r\n            value={rating === -1 ? null : rating}\r\n            precision={0.5}\r\n            emptyIcon={<StarIcon fontSize=\"inherit\" />}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.rateSubmitButton}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit Rating\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      style={{\r\n        padding: \"30px\",\r\n        minHeight: \"93vh\",\r\n        backgroundColor: \"#f2f2f2\",\r\n      }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\" style={{ color: \"#333\", fontWeight: \"bold\" }}>\r\n          Applications\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        style={{ width: \"100%\" }}\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item key={obj._id}>\r\n              <ApplicationTile application={obj} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n              marginLeft: \"25%\",\r\n              marginRight: \"25%\",\r\n              paddingTop: \"15px\",\r\n            }}\r\n          >\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Profile.js",["251","252","253","254","255","256","257","258","259"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList, {server} from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n  avatar: {\r\n    alignSelf:\"center\",\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid item container className={classes.inputBox} key={key}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [userData, setUserData] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n  });\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        if (response.data.education.length > 0) {\r\n          setEducation(\r\n            response.data.education.map((edu) => ({\r\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\r\n              startYear: edu.startYear ? edu.startYear : \"\",\r\n              endYear: edu.endYear ? edu.endYear : \"\",\r\n            }))\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        //console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n   \r\n  const getResume= ()=>{\r\n    const address = `${profileDetails.resume}`;\r\n    console.log(address)\r\n    if(address!==\"\")\r\n    {\r\n      window.open(address)\r\n      // console.log(error);\r\n        \r\n    }else{\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"You have not uploaded any resume. Upload one to view!\",\r\n      });\r\n    }\r\n    \r\n    // axios(address, {\r\n    //   method: \"GET\",\r\n    //   responseType: \"blob\",\r\n    // })\r\n    //   .then((response) => {\r\n    //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n    //     const fileURL = URL.createObjectURL(file);\r\n    //     window.open(fileURL);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //     setPopup({\r\n    //       open: true,\r\n    //       severity: \"error\",\r\n    //       message: \"You have not uploaded any resume. Upload one to view!\",\r\n    //     });\r\n    //   });\r\n  }\r\n\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const editDetails = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n    setOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        \r\n        <Grid item xs>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Grid\r\n                container direction=\"column\" alignItems=\"center\" \r\n                xs={2}\r\n                style={{\r\n                  display:\"center\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  float:\"left\",\r\n                }}\r\n              >\r\n                <Avatar\r\n                  src={`${profileDetails.profile}`}\r\n                  className={classes.avatar}\r\n                  \r\n                />\r\n                \r\n              </Grid>\r\n            <Grid container direction=\"column\" alignItems=\"\" spacing={3}>\r\n            \r\n            {/* <Grid item >\r\n              \r\n            </Grid> */}\r\n            \r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <MultifieldInput\r\n                education={education}\r\n                setEducation={setEducation}\r\n              />\r\n              <Grid item>\r\n                <ChipInput\r\n                  className={classes.inputBox}\r\n                  label=\"Skills\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Press enter to add skills\"\r\n                  value={profileDetails.skills}\r\n                  onAdd={(chip) =>\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: [...profileDetails.skills, chip],\r\n                    })\r\n                  }\r\n                  onDelete={(chip, index) => {\r\n                    let skills = profileDetails.skills;\r\n                    skills.splice(index, 1);\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: skills,\r\n                    });\r\n                  }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Resume (Images only)\"\r\n                  icon={<DescriptionIcon />}\r\n                  uploadTo={apiList.uploadResume}\r\n                  handleInput={handleInput}\r\n                  identifier={\"resume\"}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.statusBlock}\r\n                color=\"primary\"\r\n                onClick={() => getResume()}\r\n                style={{alignItems:\"center\"}}\r\n              >\r\n                View Uploaded Resume\r\n              </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Profile Photo (.jpg/.png)\"\r\n                  icon={<FaceIcon />}\r\n                  uploadTo={apiList.uploadProfileImage}\r\n                  handleInput={handleInput}\r\n                  identifier={\"profile\"}\r\n                />\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\",borderRadius:\"8px\",height:\"50px\"}}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Signup.js",["260","261"],"import { useState, useContext } from \"react\";\r\nimport {Grid,TextField,Button,Typography,makeStyles,Paper,MenuItem,Input,} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  inputBox: {\r\n    width: \"400px\",\r\n  },\r\n  submitButton: {\r\n    width: \"400px\",\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid\r\n          item\r\n          container\r\n          className={classes.inputBox}\r\n          key={key}\r\n          style={{ paddingLeft: 0, paddingRight: 0 }}\r\n        >\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Signup = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [signupDetails, setSignupDetails] = useState({\r\n    type: \"applicant\",\r\n    email: \"\",\r\n    password: \"\",\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    name: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setSignupDetails({\r\n      ...signupDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        required: true,\r\n        untouched: false,\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLoginRecruiter = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    console.log(updatedDetails);\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Paper elevation={3} className={classes.body}>\r\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography variant=\"h3\" component=\"h2\" style={{color:\"#3f51b5\",fontWeight:\"bold\"}}>\r\n            Sign up\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            select\r\n            label=\"Category\"\r\n            variant=\"outlined\"\r\n            className={classes.inputBox}\r\n            value={signupDetails.type}\r\n            onChange={(event) => {\r\n              handleInput(\"type\", event.target.value);\r\n            }}\r\n          >\r\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\r\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={signupDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.name.error}\r\n            helperText={inputErrorHandler.name.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"name\", true, \"Name is required\");\r\n              } else {\r\n                handleInputError(\"name\", false, \"\");\r\n              }\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <EmailInput\r\n            label=\"Email\"\r\n            value={signupDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n            required={true}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <PasswordInput\r\n            label=\"Password\"\r\n            value={signupDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.password.error}\r\n            helperText={inputErrorHandler.password.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"password\", true, \"Password is required\");\r\n              } else {\r\n                handleInputError(\"password\", false, \"\");\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n        {signupDetails.type === \"applicant\" ? (\r\n          <>\r\n            <MultifieldInput\r\n              education={education}\r\n              setEducation={setEducation}\r\n            />\r\n            <Grid item>\r\n              <ChipInput\r\n                className={classes.inputBox}\r\n                label=\"Skills\"\r\n                variant=\"outlined\"\r\n                helperText=\"Press enter to add skills\"\r\n                onChange={(chips) =>\r\n                  setSignupDetails({ ...signupDetails, skills: chips })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Resume (Images only)\"\r\n                icon={<DescriptionIcon />}\r\n                // value={files.resume}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     resume: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadResume}\r\n                handleInput={handleInput}\r\n                identifier={\"resume\"}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Profile Photo (.jpg/.png)\"\r\n                icon={<FaceIcon />}\r\n                // value={files.profileImage}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     profileImage: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadProfileImage}\r\n                handleInput={handleInput}\r\n                identifier={\"profile\"}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item style={{ width: \"100%\" }}>\r\n              <TextField\r\n                label=\"Bio (upto 250 words)\"\r\n                multiline\r\n                rows={8}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n                value={signupDetails.bio}\r\n                onChange={(event) => {\r\n                  if (\r\n                    event.target.value.split(\" \").filter(function (n) {\r\n                      return n != \"\";\r\n                    }).length <= 250\r\n                  ) {\r\n                    handleInput(\"bio\", event.target.value);\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <PhoneInput\r\n                country={\"in\"}\r\n                value={phone}\r\n                onChange={(phone) => setPhone(phone)}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              signupDetails.type === \"applicant\"\r\n                ? handleLogin()\r\n                : handleLoginRecruiter();\r\n            }}\r\n            className={classes.submitButton}\r\n            style={{borderRadius:\"8px\",width:\"130px\",height:\"50px\"}}\r\n          >\r\n            Signup\r\n          </Button>\r\n          \r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n\r\n\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js",["262","263","264","265","266","267","268"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfApplication\"\r\n                    checked={searchOptions.sort.dateOfApplication.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfApplication\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfApplication\">\r\n                    <Typography>Date of Application</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfApplication.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            desc: !searchOptions.sort.dateOfApplication.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfApplication.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      window.open(address)\r\n      // axios(address, {\r\n      //   method: \"GET\",\r\n      //   responseType: \"blob\",\r\n      // })\r\n      //   .then((response) => {\r\n      //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n      //     const fileURL = URL.createObjectURL(file);\r\n      //     window.open(fileURL);\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error);\r\n      //     setPopup({\r\n      //       open: true,\r\n      //       severity: \"error\",\r\n      //       message: \"Error\",\r\n      //     });\r\n      //   });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  const buttonSet = {\r\n    applied: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"shortlisted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"shortlisted\")}\r\n          >\r\n            Shortlist\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    shortlisted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"accepted\")}\r\n          >\r\n            Accept\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    rejected: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Rejected\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    accepted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Accepted\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    cancelled: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"cancelled\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Cancelled\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    finished: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"finished\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Finished\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            Education:{\" \"}\r\n            {application.jobApplicant.education\r\n              .map((edu) => {\r\n                return `${edu.institutionName} (${edu.startYear}-${\r\n                  edu.endYear ? edu.endYear : \"Ongoing\"\r\n                })`;\r\n              })\r\n              .join(\", \")}\r\n          </Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              onClick={() => getResume()}\r\n            >\r\n              Download Resume\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs>\r\n            {buttonSet[application.status]}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            // onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst JobApplications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const { jobId } = useParams();\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    status: {\r\n      all: false,\r\n      applied: false,\r\n      shortlisted: false,\r\n    },\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfApplication: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n\r\n    if (searchOptions.status.rejected) {\r\n      searchParams = [...searchParams, `status=rejected`];\r\n    }\r\n    if (searchOptions.status.applied) {\r\n      searchParams = [...searchParams, `status=applied`];\r\n    }\r\n    if (searchOptions.status.shortlisted) {\r\n      searchParams = [...searchParams, `status=shortlisted`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}?jobId=${jobId}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}&${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Applications</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton onClick={() => setFilterOpen(true)}>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          style={{ width: \"100%\" }}\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{height:\"50px\", textAlign: \"center\",\r\n            background:\"rgba(255,255,255,0.5)\",marginLeft:\"25%\",marginRight:\"25%\",paddingTop:\"15px\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobApplications;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js",["269","270","271"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        setPhone(response.data.contactNumber);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        \r\n        <Grid item xs style={{ width: \"100%\" }}>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              //   width: \"60%\",\r\n            }}\r\n          >\r\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n            <Grid item >\r\n              <Typography variant=\"h3\" component=\"h2\" style={{color:\"#3f51b5\",fontWeight:\"bold\"}}>\r\n                Profile\r\n              </Typography>\r\n            </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  style={{ width: \"100%\" }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Bio (upto 250 words)\"\r\n                  multiline\r\n                  rows={8}\r\n                  style={{ width: \"100%\" }}\r\n                  variant=\"outlined\"\r\n                  value={profileDetails.bio}\r\n                  onChange={(event) => {\r\n                    if (\r\n                      event.target.value.split(\" \").filter(function (n) {\r\n                        return n != \"\";\r\n                      }).length <= 250\r\n                    ) {\r\n                      handleInput(\"bio\", event.target.value);\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <PhoneInput\r\n                  country={\"in\"}\r\n                  value={phone}\r\n                  onChange={(phone) => setPhone(phone)}\r\n                  style={{ width: \"auto\" }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js",["272","273"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst CreateJobs = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [jobDetails, setJobDetails] = useState({\r\n    title: \"\",\r\n    maxApplicants: 100,\r\n    maxPositions: 30,\r\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .substr(0, 16),\r\n    skillsets: [],\r\n    jobType: \"Full Time\",\r\n    duration: 0,\r\n    salary: 0,\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(jobDetails);\r\n    axios\r\n      .post(apiList.jobs, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        setJobDetails({\r\n          title: \"\",\r\n          maxApplicants: 100,\r\n          maxPositions: 30,\r\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .substr(0, 16),\r\n          skillsets: [],\r\n          jobType: \"Full Time\",\r\n          duration: 0,\r\n          salary: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"50%\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Add Job</Typography>\r\n        </Grid>\r\n        <Grid item container xs direction=\"column\" justify=\"center\">\r\n          <Grid item>\r\n            <Paper\r\n              style={{\r\n                padding: \"20px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}\r\n              >\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    value={jobDetails.title}\r\n                    onChange={(event) =>\r\n                      handleInput(\"title\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.skillsets}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: [...jobDetails.skillsets, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let skillsets = jobDetails.skillsets;\r\n                      skillsets.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: skillsets,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Job Type\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.jobType}\r\n                    onChange={(event) => {\r\n                      handleInput(\"jobType\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\r\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\r\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Duration\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.duration}\r\n                    onChange={(event) => {\r\n                      handleInput(\"duration\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value={0}>Flexible</MenuItem>\r\n                    <MenuItem value={1}>1 Month</MenuItem>\r\n                    <MenuItem value={3}>3 Months</MenuItem>\r\n                    <MenuItem value={6}>6 Months</MenuItem>\r\n                    <MenuItem value={12}>1 Year</MenuItem>\r\n                    <MenuItem value={24}>2 Years</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Salary\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.salary}\r\n                    onChange={(event) => {\r\n                      handleInput(\"salary\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Application Deadline\"\r\n                    type=\"datetime-local\"\r\n                    value={jobDetails.deadline}\r\n                    onChange={(event) => {\r\n                      handleInput(\"deadline\", event.target.value);\r\n                    }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Maximum Number Of Applicants\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxApplicants}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxApplicants\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Positions Available\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxPositions}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxPositions\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Create Job\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJobs;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["274","275","276","277","278","279","280","281","282","283","284","285","286"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  \r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"20px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexGrow: 1,\r\n  },\r\n  cardButtons: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: \"10px\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n  root: {\r\n    padding: \"30px\",\r\n    minHeight: \"93vh\",\r\n  },\r\n}));\r\n\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, applicantId: application.jobApplicant.userId },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      window.open(address)\r\n      // axios(address, {\r\n      //   method: \"GET\",\r\n      //   responseType: \"blob\",\r\n      // })\r\n      //   .then((response) => {\r\n      //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n      //     const fileURL = URL.createObjectURL(file);\r\n      //     window.open(fileURL);\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error);\r\n      //     setPopup({\r\n      //       open: true,\r\n      //       severity: \"error\",\r\n      //       message: \"Error\",\r\n      //     });\r\n      //   });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n\r\n  return (\r\n\r\n\r\n\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Avatar src={`${application.jobApplicant.profile}`} className={classes.avatar} />\r\n\r\n      <div className={classes.cardContent}>\r\n        <Typography variant=\"h5\">{application.jobApplicant.name}</Typography>\r\n        <Rating\r\n          value={application.jobApplicant.rating !== -1 ? application.jobApplicant.rating : null}\r\n          readOnly\r\n        />\r\n        <Typography>Job Title: {application.job.title}</Typography>\r\n        <Typography>Role: {application.job.jobType}</Typography>\r\n        <Typography>Applied On: {appliedOn.toLocaleDateString()}</Typography>\r\n        <Typography>SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}</Typography>\r\n        {application.jobApplicant.skills.map((skill, index) => (\r\n          <Chip label={skill} style={{ marginRight: \"2px\" }} key={index} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className={classes.cardButtons}>\r\n        <Button\r\n          variant=\"contained\"\r\n          className={classes.statusBlock}\r\n          color=\"primary\"\r\n          onClick={() => getResume()}\r\n        >\r\n          Download Resume\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.statusBlock}\r\n          style={{\r\n            background: \"#09BC8A\",\r\n          }}\r\n          onClick={() => {\r\n            setOpenEndJob(true);\r\n          }}\r\n        >\r\n          End Job\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.statusBlock}\r\n          onClick={() => {\r\n            setOpen(true);\r\n          }}\r\n        >\r\n          Rate Applicant\r\n        </Button>\r\n      </div>\r\n\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal open={openEndJob} onClose={handleCloseEndJob} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n        Employees\r\n      </Typography>\r\n      <IconButton onClick={() => setFilterOpen(true)}>\r\n        <FilterListIcon />\r\n      </IconButton>\r\n      <Grid container spacing={2}>\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item xs={12} sm={6} md={4} key={obj._id}>\r\n              <ApplicationTile application={obj} getData={getData} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n            }}\r\n          >\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js",["287"],"import { Snackbar, Slide } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst MessagePopup = (props) => {\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    props.setOpen(false);\r\n  };\r\n  return (\r\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\r\n      <Alert onClose={handleClose} severity={props.severity}>\r\n        {props.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default MessagePopup;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Navbar.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Welcome.js",["288","289","290"],"import React from 'react';\r\nimport { Grid, Typography, Card, CardContent, makeStyles, Button } from \"@material-ui/core\";\r\nimport robotImage from \"./robot.png\"; // Replace with your image URL\r\nimport star from \"./Star.svg\"; // Replace with your icon URLs\r\nimport shield from \"./Shield.svg\";\r\nimport send from \"./Send.svg\";\r\nimport './styles.css';\r\nimport card from \"./card.png\";\r\nimport { feedback } from '../constants'\r\nimport Feedback from './Feedback';\r\nimport Clients from './Clients';\r\nimport { clients } from '../constants'\r\nimport { quotes } from '../assets'\r\nimport Footer from './Footer';\r\n\r\nconst stats = [\r\n  {\r\n    id: \"stats-1\",\r\n    title: \"User Active\",\r\n    value: \"3800+\",\r\n  },\r\n  {\r\n    id: \"stats-2\",\r\n    title: \"Trusted by Company\",\r\n    value: \"230+\",\r\n  },\r\n  {\r\n    id: \"stats-3\",\r\n    title: \"Transaction\",\r\n    value: \"$230M+\",\r\n  },\r\n];\r\n\r\nconst features = [\r\n  {\r\n    id: \"feature-1\",\r\n    icon: star,\r\n    title: \"Rewarding Opportunities\",\r\n    content:\r\n      \"At ITConnect, we provide freelancers and developers with rewarding opportunities that combine promotions and prizes to enhance your career journey.\",\r\n  },\r\n  {\r\n    id: \"feature-2\",\r\n    icon: shield,\r\n    title: \"Secured Collaborations\",\r\n    content:\r\n      \"Your security matters. We take proactive measures to ensure that your information and transactions are protected, fostering a secure environment for collaboration.\",\r\n  },\r\n  {\r\n    id: \"feature-3\",\r\n    icon: send,\r\n    title: \"Streamlined Project Transfers\",\r\n    content:\r\n      \"Managing projects becomes effortless. With our streamlined process, you can transfer projects seamlessly, optimizing efficiency and saving valuable time and resources.\",\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    backgroundColor: \"black\", // Background color of the cards\r\n    color: \"white\",\r\n    padding: theme.spacing(2), // Adjust padding here\r\n    borderRadius: theme.spacing(2), // Add rounded corners\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\", // Add a subtle box shadow\r\n  },\r\n  topPadding: {\r\n    paddingTop: theme.spacing(4), // Add top padding between image and cards\r\n  },\r\n  cardText: {\r\n    fontSize: \"15px\", // Increase font size\r\n    color: \"white\", // Set text color to white\r\n  },\r\n  cardTitle: {\r\n    color: \"#4fc3f7\", // Set the title color to sky blue\r\n  },\r\n  leftSection: {\r\n    padding: \"30px\",\r\n  },\r\n  button: {\r\n    marginTop: \"20px\",\r\n    backgroundColor: \"#4fc3f7\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3f8cb5\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Welcome = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <section\r\n      id=\"home\"\r\n      style={{\r\n        background: \"black\", // Set the background color to black\r\n        color: \"white\",\r\n        paddingTop: \"20px\",\r\n        paddingBottom: \"20px\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Grid container justify-content=\"center\" alignItems=\"center\">\r\n        <Grid item xs={12} sm={6}>\r\n          <div className={classes.leftSection}>\r\n            <h1\r\n              style={{\r\n                marginLeft: \"30px\",\r\n                fontSize: \"44px\",\r\n                fontWeight: \"bold\",\r\n                lineHeight: \"60px\",\r\n                marginTop: \"0\",\r\n                color: \"#30e4e1\", // Set font color to red\r\n                fontStyle: \"italic\", // Set font style to italic\r\n              }}\r\n            >\r\n              ITConnect - \r\n              <br/>A Virtual Company\r\n            </h1>\r\n            <Typography\r\n              variant=\"body1\"\r\n              style={{\r\n\r\n                fontSize: \"20px\",\r\n                marginTop: \"30px\",\r\n                lineHeight: \"1.6\",\r\n                textAlign: \"justify\", // Set text alignment to justify\r\n              }}\r\n            >\r\n              Are you looking to get hired? Why not take an AI-based test to\r\n              showcase your skills and stand out from the crowd! Unlock your\r\n              potential with AI-based tests for hiring success. Embrace the\r\n              future, showcase your skills, and stand out!\r\n              <br />\r\n              In today's competitive job market, it's crucial to demonstrate\r\n              your expertise. Our AI-powered testing platform allows you to\r\n              highlight your capabilities and increase your chances of landing\r\n              your dream job.\r\n              <br />\r\n              Join us in this exciting journey toward career excellence.\r\n            </Typography>\r\n            <Button variant=\"contained\" className={classes.button}>\r\n              Learn More\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} className={classes.topPadding}>\r\n          {/* Add your image here */}\r\n          <img\r\n            src={robotImage} // Replace with your image URL\r\n            alt=\"Company Image\"\r\n            style={{ width: \"80%\", height: \"auto\" }} // Adjust the width and height as needed\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Stats section */}\r\n      <Grid container spacing={2} justify=\"center\">\r\n        {stats.map((stat) => (\r\n          <Grid item xs={12} sm={4} key={stat.id}>\r\n            <Card className={classes.card}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\" className={classes.cardText}>\r\n                  {stat.value}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\" className={classes.cardTitle}>\r\n                  {stat.title}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Features section */}\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <div className={classes.leftSection}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Your Projects,\r\n              <br />\r\n              Our Talent Ecosystem.\r\n            </Typography>\r\n            <Typography variant=\"body1\" paragraph style={{ fontSize: \"20px\", textAlign: \"justify\" }}>\r\n              At ITConnect, we understand the value of your time and expertise. Focus on your business goals while we take care of your financial needs. With the right solutions, you can enhance your financial journey by building credit, earning rewards, and optimizing savings. Navigate the vast landscape of financial options confidently, even with countless choices available. Let us empower you with the tools and guidance to make informed decisions.\r\n            </Typography>\r\n\r\n            <Button variant=\"contained\" className={classes.button}>\r\n              Learn More\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          {features.map((feature) => (\r\n            <Card key={feature.id} className={classes.card}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\" className={classes.cardTitle}>\r\n                  {feature.title}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\" className={classes.cardText}>\r\n                  {feature.content}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* carddeal section */}\r\n      <section className=\"section\">\r\n  <div className=\"sectionInfo\">\r\n    <h2 className=\"heading2\">Discover Ideal Roles <br className='sm:block hidden'/>in few easy steps.</h2>\r\n    <p className=\"paragraph max-w-470 mt-5 text-justify\">\r\n      Ready for a more fulfilling career? Unlock opportunities by identifying your strengths, \r\n      exploring new industries, and connecting with professionals. \r\n      Tailor your skills and passions to find the role that suits you best.\r\n    </p>\r\n    <button type='button' className=\" bg-blue-gradient font-poppins font-medium text-18 text-primary outline-none rounded-10     padding: 10px;\r\n     \"  style={{ width: '136px', color: 'white', padding: '10px' }}>\r\n      View Roles\r\n    </button>\r\n  </div>\r\n  <div className=\"sectionImg\">\r\n    <img\r\n      src={card}\r\n      alt='card'\r\n      className='w-100 h-100'\r\n    />\r\n  </div>\r\n</section>\r\n\r\n<section id='clients' className='paddingY flexce flex-col relative'>\r\n<div className='w-full flex justify-between items-center md:flex-row flex-col mb-6 relative z-1' style={{display: 'flex', paddingLeft: '58px'}}>\r\n  <h2 className='font-poppins font-semibold text-[48px] text-[40px] text-white leading-[76.8px] leading-[66.8px] w-full'>\r\n    What our clients have to say\r\n  </h2>\r\n  <div className='w-full mt-6'>\r\n  <p className='font-poppins font-normal text-dimWhite text-[18px] leading-[30.8px] text-left max-w-[500px]' style={{padding: '46px 78px'}}>\r\n      Discover how Virtual IT Company has revolutionized their business with cutting-edge virtual technology and unparalleled support.\r\n    </p>  \r\n  </div>\r\n</div>\r\n        \r\n</section>\r\n<div className='feedback-container'>\r\n  {feedback.map((card) => (\r\n    <div className='feedback-card' key={card.id}>\r\n      <img\r\n        src={quotes}\r\n        alt='double-quotes'\r\n        className='quotes-icon'\r\n      />\r\n      <p className='feedback-content'>\r\n        {card.content}\r\n      </p>\r\n      <div className='flex-row'>\r\n        <img\r\n          src={card.img}\r\n          alt={card.name}\r\n          className='profile-image'\r\n        />\r\n        <div className='info'>\r\n          <h4 className='name'>{card.name}</h4>\r\n          <p className='title'>{card.title}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ))}\r\n</div>\r\n\r\n\r\n\r\n{/* Clients */}\r\n<section id=\"clients\" className=\"my-4 flexCenter\">\r\n  <div className=\"flexCenter\">\r\n    {clients.map((client) => (\r\n      <div key={client.id} className=\"mx-2\">\r\n        <img\r\n          src={client.logo}\r\n          alt=\"client\"\r\n          className=\"w-111 h-auto object-contain\"\r\n        />\r\n      </div>\r\n    ))}\r\n  </div>\r\n</section>\r\n\r\n\r\n  {/* CTA */}\r\n  <section className=\"section-box\">\r\n  <div className=\"content\">\r\n    <h2>Let's try our service now!</h2>\r\n    <p>\r\n      Everything you need is Sign up, Choose role, Apply, Give test and Grab Opportunity!\r\n    </p>\r\n  </div>\r\n  <div className=\"button-wrapper\">\r\n    <button type=\"button\" className=\"apply-button\">\r\n      Apply Now\r\n    </button>\r\n  </div>\r\n</section>\r\n<Footer />\r\n\r\n\r\n\r\n\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nexport const ErrorPage = (props) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Error 404</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n\r\n\r\n\r\n\r\n\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Home.js",["291","292","293","294","295","296","297"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">{job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n          </Grid>\r\n          <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\r\n          <Grid item>Application Deadline : {deadline}</Grid>\r\n\r\n          <Grid item>\r\n            {job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => {\r\n              setOpen(true);\r\n            }}\r\n            disabled={userType() === \"recruiter\"}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n != \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <TextField\r\n              label=\"Search Jobs\"\r\n              value={searchOptions.query}\r\n              onChange={(event) =>\r\n                setSearchOptions({\r\n                  ...searchOptions,\r\n                  query: event.target.value,\r\n                })\r\n                \r\n              }\r\n              onKeyPress={(ev) => {\r\n                if (ev.key === \"Enter\") {\r\n                  getData();\r\n                }\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment>\r\n                    <IconButton onClick={() => getData()}>\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              style={{ width: \"500px\",backgroundColor:\"white\",borderRadius:\"12px\" }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => {\r\n              return <JobTile job={job} />;\r\n            })\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{height:\"50px\", textAlign: \"center\",\r\n            background:\"rgba(255,255,255,0.5)\",marginLeft:\"25%\",marginRight:\"25%\",paddingTop:\"15px\" }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js",["298","299","300","301","302","303"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n}));\r\n\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { job, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [openUpdate, setOpenUpdate] = useState(false);\r\n  const [jobDetails, setJobDetails] = useState(job);\r\n\r\n  console.log(jobDetails);\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleClick = (location) => {\r\n    history.push(location);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    console.log(job._id);\r\n    axios\r\n      .delete(`${apiList.jobs}/${job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const handleJobUpdate = () => {\r\n    axios\r\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleCloseUpdate();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleCloseUpdate();\r\n      });\r\n  };\r\n\r\n  const postedOn = new Date(job.dateOfPosting);\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">{job.title}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n          </Grid>\r\n          <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\r\n          <Grid item>\r\n            Remaining Number of Positions:{\" \"}\r\n            {job.maxPositions - job.acceptedCandidates}\r\n          </Grid>\r\n          <Grid item>\r\n            {job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item xs>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\r\n            >\r\n              View Applications\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpenUpdate(true);\r\n              }}\r\n              style={{\r\n                background: \"#FC7A1E\",\r\n                color: \"#fff\",\r\n              }}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Delete Job\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleDelete()}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleClose()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openUpdate}\r\n        onClose={handleCloseUpdate}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Update Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            spacing={3}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Application Deadline\"\r\n                type=\"datetime-local\"\r\n                value={jobDetails.deadline.substr(0, 16)}\r\n                onChange={(event) => {\r\n                  handleInput(\"deadline\", event.target.value);\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Maximum Number Of Applicants\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxApplicants}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxApplicants\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Positions Available\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxPositions}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxPositions\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleJobUpdate()}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseUpdate()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst MyJobs = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [`myjobs=1`];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>My Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <TextField\r\n              label=\"Search Jobs\"\r\n              value={searchOptions.query}\r\n              onChange={(event) =>\r\n                setSearchOptions({\r\n                  ...searchOptions,\r\n                  query: event.target.value,\r\n                })\r\n              }\r\n              onKeyPress={(ev) => {\r\n                if (ev.key === \"Enter\") {\r\n                  getData();\r\n                }\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment>\r\n                    <IconButton onClick={() => getData()}>\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              style={{ width: \"500px\", backgroundColor: \"white\", borderRadius: \"12px\" }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"row\" // Display job cards in a row\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n          spacing={2} // Add spacing between cards\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => (\r\n              <Grid item xs={12} sm={6} md={4} key={job._id}> {/* Display 3 cards per row on large screens */}\r\n                <JobTile job={job} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{\r\n              height: \"50px\", textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\", marginLeft: \"25%\", marginRight: \"25%\", paddingTop: \"15px\"\r\n            }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyJobs;\r\n","D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\lib\\apiList.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Footer.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Feedback.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\component\\Clients.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\constants\\index.js",[],"D:\\MyProjects\\WT project\\IT_CONNECT\\frontend\\src\\assets\\index.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\index.js",[],["304","305"],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\App.js",["306","307"],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Login.js",["308"],"import { useContext, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../index.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nimport img from './login-img.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: theme.spacing(5),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    margin: \"auto\",\r\n    maxWidth: \"800px\",\r\n  },\r\n  inputBox: {\r\n    width: \"300px\",\r\n    maxWidth: \"300px\",\r\n  },\r\n  submitButton: {\r\n    width: \"200px\",\r\n    maxWidth: \"300px\",\r\n    borderRadius: \"8px\",\r\n    height: \"50px\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [loginDetails, setLoginDetails] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setLoginDetails({\r\n      ...loginDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\r\n      return inputErrorHandler[obj].error;\r\n    });\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.login, loginDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n      <Paper elevation={10} className={classes.body}>\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", margin: \"20px 0px\" }}>\r\n          <img src={img} width=\"300px\" height=\"300px\" alt=\"login\" />\r\n        </div>\r\n        <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n          <Grid item>\r\n            <Typography variant=\"h3\" component=\"h2\" style={{ color: \"#3f51b5\", fontWeight: \"bold\", textAlign: \"center\" }}>\r\n              Welcome back, Login!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <EmailInput\r\n              label=\"Email\"\r\n              value={loginDetails.email}\r\n              onChange={(event) => handleInput(\"email\", event.target.value)}\r\n              inputErrorHandler={inputErrorHandler}\r\n              handleInputError={handleInputError}\r\n              className={classes.inputBox}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <PasswordInput\r\n              label=\"Password\"\r\n              value={loginDetails.password}\r\n              onChange={(event) => handleInput(\"password\", event.target.value)}\r\n              className={classes.inputBox}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleLogin()}\r\n              className={classes.submitButton}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Navbar.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Welcome.js",["309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325"],"import React from 'react';\r\nimport { Grid, Typography, Card, CardContent, makeStyles, Button } from \"@material-ui/core\";\r\nimport robotImage from \"./robot.png\"; // Replace with your image URL\r\nimport star from \"./Star.svg\"; // Replace with your icon URLs\r\nimport shield from \"./Shield.svg\";\r\nimport send from \"./Send.svg\";\r\nimport './styles.css';\r\nimport card from \"./card.png\";\r\nimport { feedback } from '../constants'\r\nimport Feedback from './Feedback';\r\nimport Clients from './Clients';\r\nimport { clients } from '../constants'\r\nimport { quotes } from '../assets'\r\nimport Footer from './Footer';\r\nimport { useMediaQuery } from '@material-ui/core';\r\n\r\n\r\nimport people01 from \"./people01.png\";\r\nimport people02 from \"./people02.png\";\r\nimport people03 from \"./people03.png\";\r\n\r\nimport amazon from \"./amazon.png\";\r\nimport microsoft from \"./microsoft.png\";\r\nimport facebook1 from \"./facebook1.png\";\r\nimport google1 from \"./google1.png\";\r\n\r\nimport './welcome.css';\r\n\r\n\r\n\r\n\r\nconst stats = [\r\n  {\r\n    id: \"stats-1\",\r\n    title: \"User Active\",\r\n    value: \"3800+\",\r\n  },\r\n  {\r\n    id: \"stats-2\",\r\n    title: \"Trusted by Company\",\r\n    value: \"230+\",\r\n  },\r\n  {\r\n    id: \"stats-3\",\r\n    title: \"Transaction\",\r\n    value: \"$230M+\",\r\n  },\r\n];\r\n\r\nconst features = [\r\n  {\r\n    id: \"feature-1\",\r\n    icon: star,\r\n    title: \"Rewarding Opportunities\",\r\n    content:\r\n      \"At ITConnect, we provide freelancers and developers with rewarding opportunities that combine promotions and prizes to enhance your career journey.\",\r\n  },\r\n  {\r\n    id: \"feature-2\",\r\n    icon: shield,\r\n    title: \"Secured Collaborations\",\r\n    content:\r\n      \"Your security matters. We take proactive measures to ensure that your information and transactions are protected, fostering a secure environment for collaboration.\",\r\n  },\r\n  {\r\n    id: \"feature-3\",\r\n    icon: send,\r\n    title: \"Streamlined Project Transfers\",\r\n    content:\r\n      \"Managing projects becomes effortless. With our streamlined process, you can transfer projects seamlessly, optimizing efficiency and saving valuable time and resources.\",\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    backgroundColor: \"black\", // Background color of the cards\r\n    color: \"white\",\r\n    padding: theme.spacing(2), // Adjust padding here\r\n    borderRadius: theme.spacing(2), // Add rounded corners\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\", // Add a subtle box shadow\r\n  },\r\n\r\n  leftSection: {\r\n     textAlign: 'center',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(2), // Increase left margin\r\n    },\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  topPadding: {\r\n    paddingTop: theme.spacing(2),\r\n  },\r\n\r\n  topPadding: {\r\n    paddingTop: theme.spacing(4), // Add top padding between image and cards\r\n  },\r\n  cardText: {\r\n    fontSize: \"15px\", // Increase font size\r\n    color: \"white\", // Set text color to white\r\n  },\r\n  cardTitle: {\r\n    color: \"#4fc3f7\", // Set the title color to sky blue\r\n  },\r\n  leftSection: {\r\n    padding: \"30px\",\r\n  },\r\n  button: {\r\n    marginTop: \"20px\",\r\n    backgroundColor: \"#4fc3f7\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3f8cb5\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Welcome = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const isSmallScreen = useMediaQuery('(max-width:600px)');\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"hero-section\">\r\n      <div className=\"hero-content\">\r\n        <div className=\"left-content\">\r\n          <h1 className=\"company-title\">IT CONNECT</h1>\r\n          <p className=\"intro\">\r\n            Are you looking to get hired? Why not take an AI-based test to showcase your skills and stand out from the crowd! Unlock your potential with AI-based tests for hiring success. Embrace the future, showcase your skills, and stand out!\r\n            <br /><br />\r\n            In today's competitive job market, it's crucial to demonstrate your expertise. Our AI-powered testing platform allows you to highlight your capabilities and increase your chances of landing your dream job.\r\n            <br /><br />\r\n            Join us in this exciting journey toward career excellence.\r\n          </p>\r\n          <button className=\"learn-more-button\">Learn More</button>\r\n        </div>\r\n        <div className=\"right-content\">\r\n          <img src={robotImage} alt=\"Company Image\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <section class=\"stats-section\">\r\n    <div class=\"stat-box\">\r\n      <h4 class=\"stat-value\">3800+</h4>\r\n      <p class=\"stat-title\">User Active</p>\r\n    </div>\r\n    <div class=\"stat-box\">\r\n      <h4 class=\"stat-value\">230+</h4>\r\n      <p class=\"stat-title\">Trusted by Company</p>\r\n    </div>\r\n    <div class=\"stat-box\">\r\n      <h4 class=\"stat-value\">$230M+</h4>\r\n      <p class=\"stat-title\">Transaction</p>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"section\">\r\n    <div class=\"sectionInfo\">\r\n      <h2 class=\"heading2\">Your Projects,<br></br> Our Talent Ecosystem.</h2>\r\n      <p class=\"paragraph\">\r\n        At ITConnect, we understand the value of your time and expertise. Focus on your business goals while we take care of your financial needs. With the right solutions, you can enhance your financial journey by building credit, earning rewards, and optimizing savings. Navigate the vast landscape of financial options confidently, even with countless choices available. Let us empower you with the tools and guidance to make informed decisions.\r\n      </p>\r\n      <button type=\"button\" class=\"btn-small\">Learn More</button>\r\n\r\n    </div>\r\n    <div class=\"sectionImg\">\r\n      <div class=\"feature-card\">\r\n        <img src={star} alt=\"Icon 1\" />\r\n        <div>\r\n          <h4>Rewarding Opportunities</h4>\r\n          <p>\r\n            At ITConnect, we provide freelancers and developers with rewarding opportunities that combine promotions and prizes to enhance your career journey.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"feature-card\">\r\n        <img src={shield} alt=\"Icon 2\" />\r\n        <div>\r\n          <h4>Secured Collaborations</h4>\r\n          <p>\r\n            Your security matters. We take proactive measures to ensure that your information and transactions are protected, fostering a secure environment for collaboration.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"feature-card\">\r\n        <img src={send} alt=\"Icon 3\" />\r\n        <div>\r\n          <h4>Streamlined Project Transfers</h4>\r\n          <p>\r\n            Managing projects becomes effortless. With our streamlined process, you can transfer projects seamlessly, optimizing efficiency and saving valuable time and resources.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"card-deal-section\">\r\n    <div class=\"sectionInfo\">\r\n      <h2 class=\"heading2\">Discover Ideal Roles</h2>\r\n      <p class=\"paragraph\">\r\n        Ready for a more fulfilling career? Unlock opportunities by identifying your strengths, exploring new industries, and connecting with professionals. Tailor your skills and passions to find the role that suits you best.\r\n      </p>\r\n      <button type=\"button\" class=\"btn\">View Roles</button>\r\n    </div>\r\n    <div class=\"sectionImgcard\">\r\n      <img src={card} alt=\"card\" />\r\n    </div>\r\n  </section>\r\n\r\n\r\n  <section class=\"testimonial-section\">\r\n    <div class=\"bg-circle-testimonial\"></div>\r\n    <h2 class=\"heading2-testimonial\">What our clients have to say</h2>\r\n    <p class=\"paragraph-testimonial\">\r\n      Discover how Virtual IT Company has revolutionized their business with cutting-edge virtual technology and unparalleled support.\r\n    </p>\r\n    <div class=\"feedback-container-testimonial\">\r\n  <div class=\"feedback-card-testimonial\">\r\n    <img src={people01} alt=\"Person 1\" />\r\n    <h4>Harshita Chhangani</h4>\r\n    <p>CEO, TechPro Solutions</p>\r\n    <p>\r\n      Virtual IT Company transformed our business. Top-notch virtual technology and team collaboration tools streamlined operations efficiently.\r\n    </p>\r\n  </div>\r\n  <div class=\"feedback-card-testimonial\">\r\n    <img src={people02} alt=\"Person 2\" />\r\n    <h4>Vaishnavi Arthamwar</h4>\r\n    <p>CTO, InnovateX</p>\r\n    <p>\r\n      Best decision partnering with Virtual IT Company. Cloud computing and AI-based solutions improved productivity, reduced costs.\r\n    </p>\r\n  </div>\r\n  <div class=\"feedback-card-testimonial\">\r\n    <img src={people03} alt=\"Person 3\" />\r\n    <h4>Akshay Chame</h4>\r\n    <p>Co-Founder, NexGen Startups</p>\r\n    <p>\r\n      Reliable IT support for startups. Virtual IT Company's flexible plans enable focus on growth and innovation.\r\n    </p>\r\n  </div>\r\n</div>\r\n  </section>\r\n  <section id=\"clients\" class=\"my-4 flexCenter\">\r\n    <div class=\"flexCenter\">\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={amazon} alt=\"Amazon Logo\" />\r\n      </div>\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={microsoft} alt=\"Microsoft Logo\" />\r\n      </div>\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={google1} alt=\"Google Logo\" />\r\n      </div>\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={facebook1} alt=\"Facebook Logo\" />\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"cta-container\">\r\n    <div class=\"cta-section\">\r\n      <div class=\"cta-content\">\r\n        <h2>Let's try our service now!</h2>\r\n        <p>Everything you need is Sign up, Choose a role, Apply, Give a test, and Grab an opportunity!</p>\r\n      </div>\r\n      <div class=\"cta-button\">\r\n        <button type=\"button\">Apply Now</button>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <footer>\r\n  <div class=\"footer-container\">\r\n    <p>&copy; 2023 Your Website Name</p>\r\n  </div>\r\n</footer>\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport const ErrorPage = (props) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Error 404</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n\r\n\r\n\r\n\r\n\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Logout.js",["326"],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Applications.js",["327","328","329","330","331","332","333","334"],"import {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport { SetPopupContext } from \"../App\";\r\nimport apiList from \"../lib/apiList\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\",\r\n    transition: \"transform 0.2s ease-in-out\",\r\n    \"&:hover\": {\r\n      transform: \"scale(1.02)\",\r\n    },\r\n  },\r\n  jobTitle: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.25rem\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  statusBlock: {\r\n    width: \"fit-content\",\r\n    padding: \"5px 10px\",\r\n    borderRadius: \"5px\",\r\n    color: \"white\",\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  dateInfo: {\r\n    fontSize: \"0.875rem\",\r\n    color: \"#888\",\r\n    marginTop: \"5px\",\r\n  },\r\n  chip: {\r\n    marginRight: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  rateButton: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  modalPaper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    outline: \"none\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  modalCloseButton: {\r\n    position: \"absolute\",\r\n    top: \"10px\",\r\n    right: \"10px\",\r\n  },\r\n  ratingLabel: {\r\n    fontSize: \"1rem\",\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  ratingSlider: {\r\n    width: \"80%\",\r\n  },\r\n  rateSubmitButton: {\r\n    marginTop: \"10px\",\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3} style={{ height: \"400px\"}}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\" className={classes.jobTitle}>\r\n              {application.job.title}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Posted By: {application.recruiter.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">Role: {application.job.jobType}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Salary: &#8377; {application.job.salary} per month\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Duration:{\" \"}\r\n              {application.job.duration !== 0\r\n                ? `${application.job.duration} month`\r\n                : `Flexible`}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <div>\r\n              {application.job.skillsets.map((skill) => (\r\n                <Chip\r\n                  key={skill}\r\n                  label={skill}\r\n                  className={classes.chip}\r\n                  variant=\"outlined\"\r\n                />\r\n              ))}\r\n            </div>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n              Applied On: {appliedOn.toLocaleDateString()}\r\n            </Typography>\r\n            {application.status === \"accepted\" ||\r\n              application.status === \"finished\" ? (\r\n              <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n                Joined On: {joinedOn.toLocaleDateString()}\r\n              </Typography>\r\n            ) : null}\r\n            {/* Move the status block here */}\r\n            Status:\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.dateInfo}\r\n              style={{\r\n                color: colorSet[application.status],\r\n                marginTop: \"5px\",\r\n                fontWeight: \"bold\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n               {application.status}\r\n            </Typography>\r\n            {application.status === \"accepted\" || application.status === \"finished\" ? (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.rateButton}\r\n                onClick={() => {\r\n                  fetchRating();\r\n                  setOpen(true);\r\n                }}\r\n                style={{ marginTop: \"10px\" }}\r\n              >\r\n                Rate Job\r\n              </Button>\r\n            </Grid>\r\n          ) : null}\r\n          </Grid>\r\n        </Grid>\r\n        \r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.modal}>\r\n        <Paper className={classes.modalPaper}>\r\n          <IconButton\r\n            edge=\"end\"\r\n            color=\"inherit\"\r\n            onClick={handleClose}\r\n            className={classes.modalCloseButton}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.ratingLabel}>\r\n            Rate this Job\r\n          </Typography>\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            className={classes.ratingSlider}\r\n            value={rating === -1 ? null : rating}\r\n            precision={0.5}\r\n            emptyIcon={<StarIcon fontSize=\"inherit\" />}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.rateSubmitButton}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit Rating\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n    container\r\n    item\r\n    direction=\"column\"\r\n    alignItems=\"center\"\r\n    style={{\r\n      padding: \"30px\",\r\n      minHeight: \"93vh\",\r\n      // backgroundColor: \"#ffffff\",\r\n    }}\r\n  >\r\n    <Grid item>\r\n      <Typography variant=\"h2\" style={{ color: \"#6f\", fontWeight: \"bold\" }}>\r\n        Applications\r\n      </Typography>\r\n    </Grid>\r\n\r\n    <Grid\r\n      container\r\n      item\r\n      xs\r\n      direction=\"row\"\r\n      spacing={2}\r\n      style={{ width: \"100%\" }}\r\n      alignItems=\"stretch\"  // Set alignItems to stretch\r\n      justify=\"center\"\r\n    >\r\n      {applications.length > 0 ? (\r\n        applications.map((obj, index) => (\r\n          <Grid item key={obj._id} xs={12} sm={6} md={4}>\r\n            <ApplicationTile application={obj} />\r\n          </Grid>\r\n        ))\r\n      ) : (\r\n        <Typography\r\n          variant=\"h5\"\r\n          style={{\r\n            height: \"50px\",\r\n            textAlign: \"center\",\r\n            background: \"rgba(255,255,255,0.5)\",\r\n            marginLeft: \"25%\",\r\n            marginRight: \"25%\",\r\n            paddingTop: \"15px\",\r\n          }}\r\n        >\r\n          No Applications Found\r\n        </Typography>\r\n      )}\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Signup.js",["335","336","337","338","339","340","341","342"],"import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    margin: \"15px\", // Adjust as needed\r\n    padding: theme.spacing(4),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: theme.spacing(2),\r\n    },\r\n  },\r\n  inputBox: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  submitButton: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          className={classes.inputBox}\r\n          key={key}\r\n          style={{ paddingLeft: 0, paddingRight: 0 }}\r\n        >\r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6} md={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6} md={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item className={classes.inputBox}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          fullWidth\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Signup = () => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [signupDetails, setSignupDetails] = useState({\r\n    type: \"applicant\",\r\n    email: \"\",\r\n    password: \"\",\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    name: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setSignupDetails({\r\n      ...signupDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        required: true,\r\n        untouched: false,\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n  const handleLogin = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLoginRecruiter = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    console.log(updatedDetails);\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Paper elevation={3} className={classes.body}>\r\n      <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography variant=\"h3\" component=\"h2\" style={{ color: \"#3f51b5\", fontWeight: \"bold\" }}>\r\n            Sign up\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={classes.inputBox}>\r\n          <TextField\r\n            select\r\n            label=\"Category\"\r\n            variant=\"outlined\"\r\n            value={signupDetails.type}\r\n            onChange={(event) => {\r\n              handleInput(\"type\", event.target.value);\r\n            }}\r\n            fullWidth\r\n          >\r\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\r\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item className={classes.inputBox}>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={signupDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            error={inputErrorHandler.name.error}\r\n            helperText={inputErrorHandler.name.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"name\", true, \"Name is required\");\r\n              } else {\r\n                handleInputError(\"name\", false, \"\");\r\n              }\r\n            }}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <MultifieldInput education={education} setEducation={setEducation} />\r\n        {/* ... (unchanged) */}\r\n        <Grid item className={classes.inputBox}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              signupDetails.type === \"applicant\" ? handleLogin() : handleLoginRecruiter();\r\n            }}\r\n            className={classes.submitButton}\r\n          >\r\n            Signup\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Signup;","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js",["343","344"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      paddingTop: \"60px\",\r\n      fontSize: \"1.5rem\",\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      fontSize: \"2rem\",\r\n      paddingTop: \"34px\",\r\n    },\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      fontSize: \"2.5rem\",\r\n    },\r\n    [theme.breakpoints.up(\"lg\")]: {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateJobs = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [jobDetails, setJobDetails] = useState({\r\n    title: \"\",\r\n    maxApplicants: 100,\r\n    maxPositions: 30,\r\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .substr(0, 16),\r\n    skillsets: [],\r\n    jobType: \"Full Time\",\r\n    duration: 0,\r\n    salary: 0,\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(jobDetails);\r\n    axios\r\n      .post(apiList.jobs, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        setJobDetails({\r\n          title: \"\",\r\n          maxApplicants: 100,\r\n          maxPositions: 30,\r\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .substr(0, 16),\r\n          skillsets: [],\r\n          jobType: \"Full Time\",\r\n          duration: 0,\r\n          salary: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n        xs={12} sm={10} md={8} lg={6} // Adjust these values based on your design\r\n      >\r\n\r\n        <Grid item>\r\n          <Typography variant=\"h2\" className={classes.title} align=\"center\">\r\n            Add Job\r\n          </Typography>\r\n\r\n        </Grid>\r\n        <Grid container direction=\"column\" justify=\"center\" spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Paper\r\n              style={{\r\n                padding: \"8px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                width: \"100%\", // Adjust this value based on your design\r\n              }}\r\n            >\r\n\r\n              <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    value={jobDetails.title}\r\n                    onChange={(event) =>\r\n                      handleInput(\"title\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.skillsets}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: [...jobDetails.skillsets, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let skillsets = jobDetails.skillsets;\r\n                      skillsets.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: skillsets,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Job Type\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.jobType}\r\n                    onChange={(event) => {\r\n                      handleInput(\"jobType\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\r\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\r\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Duration\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.duration}\r\n                    onChange={(event) => {\r\n                      handleInput(\"duration\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value={0}>Flexible</MenuItem>\r\n                    <MenuItem value={1}>1 Month</MenuItem>\r\n                    <MenuItem value={3}>3 Months</MenuItem>\r\n                    <MenuItem value={6}>6 Months</MenuItem>\r\n                    <MenuItem value={12}>1 Year</MenuItem>\r\n                    <MenuItem value={24}>2 Years</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Salary\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.salary}\r\n                    onChange={(event) => {\r\n                      handleInput(\"salary\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Application Deadline\"\r\n                    type=\"datetime-local\"\r\n                    value={jobDetails.deadline}\r\n                    onChange={(event) => {\r\n                      handleInput(\"deadline\", event.target.value);\r\n                    }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Maximum Number Of Applicants\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxApplicants}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxApplicants\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Positions Available\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxPositions}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxPositions\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 20px\", marginTop: \"30px\", width: \"100%\" }}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Create Job\r\n              </Button>\r\n\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJobs;\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Profile.js",["345","346","347","348","349","350","351","352","353"],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Home.js",["354","355","356","357","358","359","360"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n    <Typography variant=\"h5\">{job.title}</Typography>\r\n    <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n    <div>Role: {job.jobType}</div>\r\n    <div>Salary: &#8377; {job.salary} per month</div>\r\n    <div>\r\n      Duration: {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n    </div>\r\n    <div>Posted By: {job.recruiter.name}</div>\r\n    <div>Application Deadline: {deadline}</div>\r\n\r\n    <div>\r\n      {job.skillsets.map((skill) => (\r\n        <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n      ))}\r\n    </div>\r\n\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      className={classes.button}\r\n      onClick={() => setOpen(true)}\r\n      disabled={userType() === \"recruiter\"}\r\n    >\r\n      Apply\r\n    </Button>\r\n\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n != \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n  </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4} lg={3}>\r\n  <TextField\r\n    label=\"Search Jobs\"\r\n    value={searchOptions.query}\r\n    onChange={(event) =>\r\n      setSearchOptions({\r\n        ...searchOptions,\r\n        query: event.target.value,\r\n      })\r\n    }\r\n    onKeyPress={(ev) => {\r\n      if (ev.key === \"Enter\") {\r\n        getData();\r\n      }\r\n    }}\r\n    InputProps={{\r\n      endAdornment: (\r\n        <InputAdornment>\r\n          <IconButton onClick={() => getData()}>\r\n            <SearchIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      ),\r\n    }}\r\n    style={{ width: \"100%\", maxWidth: \"500px\", backgroundColor: \"white\", borderRadius: \"12px\" }}\r\n    variant=\"outlined\"\r\n  />\r\n</Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {jobs.length > 0 ? (\r\n          // Use the Grid component to arrange JobTile instances in rows of three\r\n          <Grid container spacing={3}>\r\n            {jobs.map((job, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <JobTile job={job} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n              marginLeft: \"25%\",\r\n              marginRight: \"25%\",\r\n              paddingTop: \"15px\",\r\n            }}\r\n          >\r\n            No jobs found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n        {/* <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js",["361","362","363","364","365","366","367"],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js",["368","369","370","371","372","373"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n\r\n    \r\n    \"&:hover\": {\r\n      backgroundColor: \"gray\", \r\n      color:\"white\",// Change background color on hover\r\n    },\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n}));\r\n\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { job, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [openUpdate, setOpenUpdate] = useState(false);\r\n  const [jobDetails, setJobDetails] = useState(job);\r\n\r\n  console.log(jobDetails);\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleClick = (location) => {\r\n    history.push(location);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    console.log(job._id);\r\n    axios\r\n      .delete(`${apiList.jobs}/${job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const handleJobUpdate = () => {\r\n    axios\r\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleCloseUpdate();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleCloseUpdate();\r\n      });\r\n  };\r\n\r\n  const postedOn = new Date(job.dateOfPosting);\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container direction=\"column\">\r\n        <Grid item xs>\r\n          <Typography variant=\"h5\">{job.title}</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n        </Grid>\r\n        <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\r\n          <Grid item>\r\n            Remaining Number of Positions:{\" \"}\r\n            {job.maxPositions - job.acceptedCandidates}\r\n          </Grid>\r\n        <Grid item xs>\r\n          {job.skillsets.map((skill) => (\r\n            <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n          ))}\r\n        </Grid>\r\n        <Grid item container justify=\"space-between\" alignItems=\"flex-end\" spacing={2}>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\r\n            >\r\n              View Applications\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpenUpdate(true);\r\n              }}\r\n              style={{\r\n                background: \"#FC7A1E\",\r\n                color: \"#fff\",\r\n              }}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Delete Job\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleDelete()}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleClose()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openUpdate}\r\n        onClose={handleCloseUpdate}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Update Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            spacing={3}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            <Grid item>\r\n              <TextField \r\n                label=\"Application Deadline\"\r\n                type=\"datetime-local\"\r\n                value={jobDetails.deadline.substr(0, 16)}\r\n                onChange={(event) => {\r\n                  handleInput(\"deadline\", event.target.value);\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Maximum Number Of Applicants\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxApplicants}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxApplicants\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Positions Available\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxPositions}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxPositions\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleJobUpdate()}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseUpdate()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst MyJobs = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [`myjobs=1`];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>My Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4} lg={3}>\r\n  <TextField\r\n    label=\"Search Jobs\"\r\n    value={searchOptions.query}\r\n    onChange={(event) =>\r\n      setSearchOptions({\r\n        ...searchOptions,\r\n        query: event.target.value,\r\n      })\r\n    }\r\n    onKeyPress={(ev) => {\r\n      if (ev.key === \"Enter\") {\r\n        getData();\r\n      }\r\n    }}\r\n    InputProps={{\r\n      endAdornment: (\r\n        <InputAdornment>\r\n          <IconButton onClick={() => getData()}>\r\n            <SearchIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      ),\r\n    }}\r\n    style={{ width: \"100%\", maxWidth: \"500px\", backgroundColor: \"white\", borderRadius: \"12px\" }}\r\n    variant=\"outlined\"\r\n  />\r\n</Grid>\r\n\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"row\" // Display job cards in a row\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n          spacing={2} // Add spacing between cards\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => (\r\n              <Grid item xs={12} sm={6} md={4} key={job._id}> {/* Display 3 cards per row on large screens */}\r\n                <JobTile job={job} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{\r\n              height: \"50px\", textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\", marginLeft: \"25%\", marginRight: \"25%\", paddingTop: \"15px\"\r\n            }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyJobs;","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["374","375","376","377","378","379","380","381","382","383","384","385","386"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  \r\n  popupDialog: {\r\n    \r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"20px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexGrow: 1,\r\n  },\r\n  cardButtons: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: \"10px\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n  root: {\r\n    padding: \"30px\",\r\n    minHeight: \"93vh\",\r\n  },\r\n}));\r\n\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, applicantId: application.jobApplicant.userId },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      window.open(address)\r\n      // axios(address, {\r\n      //   method: \"GET\",\r\n      //   responseType: \"blob\",\r\n      // })\r\n      //   .then((response) => {\r\n      //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n      //     const fileURL = URL.createObjectURL(file);\r\n      //     window.open(fileURL);\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error);\r\n      //     setPopup({\r\n      //       open: true,\r\n      //       severity: \"error\",\r\n      //       message: \"Error\",\r\n      //     });\r\n      //   });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n\r\n  return (\r\n\r\n\r\n\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Avatar src={`${application.jobApplicant.profile}`} className={classes.avatar} />\r\n\r\n      <div className={classes.cardContent}>\r\n        <Typography variant=\"h5\">{application.jobApplicant.name}</Typography>\r\n        <Rating\r\n          value={application.jobApplicant.rating !== -1 ? application.jobApplicant.rating : null}\r\n          readOnly\r\n        />\r\n        <Typography>Job Title: {application.job.title}</Typography>\r\n        <Typography>Role: {application.job.jobType}</Typography>\r\n        <Typography>Applied On: {appliedOn.toLocaleDateString()}</Typography>\r\n        <Typography>SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}</Typography>\r\n        {application.jobApplicant.skills.map((skill, index) => (\r\n          <Chip label={skill} style={{ marginRight: \"2px\" }} key={index} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className={classes.cardButtons}>\r\n  <Button\r\n    variant=\"contained\"\r\n    className={classes.statusBlock}\r\n    color=\"primary\"\r\n    onClick={() => getResume()}\r\n    style={{ marginRight: '8px' }} // Add margin to the right\r\n  >\r\n    Resume\r\n  </Button>\r\n\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    className={classes.statusBlock}\r\n    style={{\r\n      background: \"#09BC8A\",\r\n      marginRight: '8px', // Add margin to the right\r\n    }}\r\n    onClick={() => {\r\n      setOpenEndJob(true);\r\n    }}\r\n  >\r\n    Fire\r\n  </Button>\r\n\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    className={classes.statusBlock}\r\n    onClick={() => {\r\n      setOpen(true);\r\n    }}\r\n  >\r\n    Rate\r\n  </Button>\r\n</div>\r\n\r\n\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal open={openEndJob} onClose={handleCloseEndJob} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n        Employees\r\n      </Typography>\r\n      <IconButton onClick={() => setFilterOpen(true)}>\r\n        <FilterListIcon />\r\n      </IconButton>\r\n      <Grid container spacing={2}>\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item xs={12} sm={6} md={4} key={obj._id}>\r\n              <ApplicationTile application={obj} getData={getData} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n            }}\r\n          >\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js",["387"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  TextField,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\"; // Import the stylesheet\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  customGridItem: {\r\n    flexBasis: \"100%\",\r\n    maxWidth: \"80%\",\r\n  },\r\n  updateButton: {\r\n    width: \"100%\",\r\n    maxWidth: \"100%\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Profile = () => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const classes = useStyles();\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        setPhone(response.data.contactNumber);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: \"100vh\" }}>\r\n      <Grid item xs={12} sm={8} md={6} lg={4} className={classes.customGridItem}>\r\n        <Paper className={classes.paper}>\r\n          <Typography variant=\"h3\" component=\"h2\" style={{ color: \"#3f51b5\", fontWeight: \"bold\", marginBottom: \"20px\" }}>\r\n            Profile\r\n          </Typography>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={profileDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            style={{ marginBottom: \"20px\" }}\r\n          />\r\n          <TextField\r\n            label=\"Bio (up to 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            variant=\"outlined\"\r\n            value={profileDetails.bio}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n !== \"\";\r\n                }).length <= 250\r\n              ) {\r\n                handleInput(\"bio\", event.target.value);\r\n              }\r\n            }}\r\n            fullWidth\r\n            style={{ marginBottom: \"20px\" }}\r\n          />\r\n          <PhoneInput\r\n            country={\"in\"}\r\n            value={phone}\r\n            onChange={(phone) => setPhone(phone)}\r\n            inputProps={{\r\n              style: { width: \"100%\", marginBottom: \"20px\" },\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.updateButton}\r\n            onClick={() => handleUpdate()}\r\n          >\r\n            Update Details\r\n          </Button>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js",["388"],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\apiList.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Feedback.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Clients.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\component\\Footer.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\assets\\index.js",[],"D:\\MyProjects\\new\\IT_CONNECT\\frontend\\src\\constants\\index.js",[],{"ruleId":"389","replacedBy":"390"},{"ruleId":"391","replacedBy":"392"},{"ruleId":"393","severity":1,"message":"394","line":19,"column":8,"nodeType":"395","messageId":"396","endLine":19,"endColumn":14},{"ruleId":"393","severity":1,"message":"397","line":36,"column":7,"nodeType":"395","messageId":"396","endLine":36,"endColumn":12},{"ruleId":"398","severity":1,"message":"399","line":16,"column":6,"nodeType":"400","endLine":16,"endColumn":8,"suggestions":"401"},{"ruleId":"393","severity":1,"message":"402","line":4,"column":3,"nodeType":"395","messageId":"396","endLine":4,"endColumn":12},{"ruleId":"403","severity":1,"message":"404","line":113,"column":9,"nodeType":"405","endLine":114,"endColumn":41},{"ruleId":"393","severity":1,"message":"406","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":17},{"ruleId":"393","severity":1,"message":"402","line":9,"column":3,"nodeType":"395","messageId":"396","endLine":9,"endColumn":12},{"ruleId":"393","severity":1,"message":"407","line":12,"column":3,"nodeType":"395","messageId":"396","endLine":12,"endColumn":9},{"ruleId":"393","severity":1,"message":"408","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":13,"endColumn":19},{"ruleId":"393","severity":1,"message":"409","line":14,"column":3,"nodeType":"395","messageId":"396","endLine":14,"endColumn":12},{"ruleId":"393","severity":1,"message":"410","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":11},{"ruleId":"393","severity":1,"message":"411","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"398","severity":1,"message":"412","line":321,"column":6,"nodeType":"400","endLine":321,"endColumn":8,"suggestions":"413"},{"ruleId":"393","severity":1,"message":"414","line":5,"column":3,"nodeType":"395","messageId":"396","endLine":5,"endColumn":13},{"ruleId":"393","severity":1,"message":"415","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":8},{"ruleId":"393","severity":1,"message":"416","line":20,"column":18,"nodeType":"395","messageId":"396","endLine":20,"endColumn":24},{"ruleId":"393","severity":1,"message":"417","line":115,"column":10,"nodeType":"395","messageId":"396","endLine":115,"endColumn":18},{"ruleId":"393","severity":1,"message":"418","line":115,"column":20,"nodeType":"395","messageId":"396","endLine":115,"endColumn":31},{"ruleId":"393","severity":1,"message":"419","line":116,"column":10,"nodeType":"395","messageId":"396","endLine":116,"endColumn":14},{"ruleId":"398","severity":1,"message":"412","line":143,"column":6,"nodeType":"400","endLine":143,"endColumn":8,"suggestions":"420"},{"ruleId":"393","severity":1,"message":"421","line":212,"column":9,"nodeType":"395","messageId":"396","endLine":212,"endColumn":20},{"ruleId":"393","severity":1,"message":"422","line":216,"column":9,"nodeType":"395","messageId":"396","endLine":216,"endColumn":20},{"ruleId":"393","severity":1,"message":"423","line":2,"column":68,"nodeType":"395","messageId":"396","endLine":2,"endColumn":73},{"ruleId":"424","severity":1,"message":"425","line":450,"column":32,"nodeType":"426","messageId":"427","endLine":450,"endColumn":34},{"ruleId":"393","severity":1,"message":"406","line":7,"column":3,"nodeType":"395","messageId":"396","endLine":7,"endColumn":17},{"ruleId":"393","severity":1,"message":"402","line":10,"column":3,"nodeType":"395","messageId":"396","endLine":10,"endColumn":12},{"ruleId":"393","severity":1,"message":"407","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":13,"endColumn":9},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"410","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"393","severity":1,"message":"416","line":29,"column":19,"nodeType":"395","messageId":"396","endLine":29,"endColumn":25},{"ruleId":"398","severity":1,"message":"412","line":669,"column":6,"nodeType":"400","endLine":669,"endColumn":8,"suggestions":"428"},{"ruleId":"393","severity":1,"message":"415","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":8},{"ruleId":"398","severity":1,"message":"412","line":53,"column":6,"nodeType":"400","endLine":53,"endColumn":8,"suggestions":"429"},{"ruleId":"424","severity":1,"message":"425","line":167,"column":34,"nodeType":"426","messageId":"427","endLine":167,"endColumn":36},{"ruleId":"393","severity":1,"message":"430","line":1,"column":22,"nodeType":"395","messageId":"396","endLine":1,"endColumn":31},{"ruleId":"393","severity":1,"message":"415","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":8},{"ruleId":"393","severity":1,"message":"406","line":7,"column":3,"nodeType":"395","messageId":"396","endLine":7,"endColumn":17},{"ruleId":"393","severity":1,"message":"402","line":10,"column":3,"nodeType":"395","messageId":"396","endLine":10,"endColumn":12},{"ruleId":"393","severity":1,"message":"407","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":13,"endColumn":9},{"ruleId":"393","severity":1,"message":"408","line":14,"column":3,"nodeType":"395","messageId":"396","endLine":14,"endColumn":19},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"410","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"393","severity":1,"message":"431","line":20,"column":10,"nodeType":"395","messageId":"396","endLine":20,"endColumn":19},{"ruleId":"393","severity":1,"message":"416","line":29,"column":19,"nodeType":"395","messageId":"396","endLine":29,"endColumn":25},{"ruleId":"393","severity":1,"message":"432","line":82,"column":7,"nodeType":"395","messageId":"396","endLine":82,"endColumn":18},{"ruleId":"393","severity":1,"message":"433","line":399,"column":9,"nodeType":"395","messageId":"396","endLine":399,"endColumn":17},{"ruleId":"393","severity":1,"message":"434","line":620,"column":10,"nodeType":"395","messageId":"396","endLine":620,"endColumn":20},{"ruleId":"393","severity":1,"message":"435","line":621,"column":25,"nodeType":"395","messageId":"396","endLine":621,"endColumn":41},{"ruleId":"398","severity":1,"message":"412","line":644,"column":6,"nodeType":"400","endLine":644,"endColumn":8,"suggestions":"436"},{"ruleId":"393","severity":1,"message":"437","line":1,"column":20,"nodeType":"395","messageId":"396","endLine":1,"endColumn":25},{"ruleId":"393","severity":1,"message":"438","line":10,"column":8,"nodeType":"395","messageId":"396","endLine":10,"endColumn":16},{"ruleId":"393","severity":1,"message":"439","line":11,"column":8,"nodeType":"395","messageId":"396","endLine":11,"endColumn":15},{"ruleId":"440","severity":1,"message":"441","line":149,"column":11,"nodeType":"405","endLine":153,"endColumn":13},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"442","line":20,"column":8,"nodeType":"395","messageId":"396","endLine":20,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":165,"column":28,"nodeType":"426","messageId":"427","endLine":165,"endColumn":30},{"ruleId":"398","severity":1,"message":"412","line":548,"column":6,"nodeType":"400","endLine":548,"endColumn":8,"suggestions":"443"},{"ruleId":"424","severity":1,"message":"425","line":564,"column":33,"nodeType":"426","messageId":"427","endLine":564,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":570,"column":33,"nodeType":"426","messageId":"427","endLine":570,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":576,"column":32,"nodeType":"426","messageId":"427","endLine":576,"endColumn":34},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"442","line":21,"column":8,"nodeType":"395","messageId":"396","endLine":21,"endColumn":18},{"ruleId":"398","severity":1,"message":"412","line":715,"column":6,"nodeType":"400","endLine":715,"endColumn":8,"suggestions":"444"},{"ruleId":"424","severity":1,"message":"425","line":731,"column":33,"nodeType":"426","messageId":"427","endLine":731,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":737,"column":33,"nodeType":"426","messageId":"427","endLine":737,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":743,"column":32,"nodeType":"426","messageId":"427","endLine":743,"endColumn":34},{"ruleId":"389","replacedBy":"445"},{"ruleId":"391","replacedBy":"446"},{"ruleId":"393","severity":1,"message":"394","line":19,"column":8,"nodeType":"395","messageId":"396","endLine":19,"endColumn":14},{"ruleId":"393","severity":1,"message":"397","line":36,"column":7,"nodeType":"395","messageId":"396","endLine":36,"endColumn":12},{"ruleId":"393","severity":1,"message":"402","line":4,"column":3,"nodeType":"395","messageId":"396","endLine":4,"endColumn":12},{"ruleId":"393","severity":1,"message":"447","line":2,"column":28,"nodeType":"395","messageId":"396","endLine":2,"endColumn":32},{"ruleId":"393","severity":1,"message":"448","line":2,"column":34,"nodeType":"395","messageId":"396","endLine":2,"endColumn":45},{"ruleId":"393","severity":1,"message":"449","line":2,"column":59,"nodeType":"395","messageId":"396","endLine":2,"endColumn":65},{"ruleId":"393","severity":1,"message":"450","line":9,"column":10,"nodeType":"395","messageId":"396","endLine":9,"endColumn":18},{"ruleId":"393","severity":1,"message":"438","line":10,"column":8,"nodeType":"395","messageId":"396","endLine":10,"endColumn":16},{"ruleId":"393","severity":1,"message":"439","line":11,"column":8,"nodeType":"395","messageId":"396","endLine":11,"endColumn":15},{"ruleId":"393","severity":1,"message":"451","line":12,"column":10,"nodeType":"395","messageId":"396","endLine":12,"endColumn":17},{"ruleId":"393","severity":1,"message":"452","line":13,"column":10,"nodeType":"395","messageId":"396","endLine":13,"endColumn":16},{"ruleId":"393","severity":1,"message":"453","line":14,"column":8,"nodeType":"395","messageId":"396","endLine":14,"endColumn":14},{"ruleId":"393","severity":1,"message":"454","line":32,"column":7,"nodeType":"395","messageId":"396","endLine":32,"endColumn":12},{"ruleId":"393","severity":1,"message":"455","line":50,"column":7,"nodeType":"395","messageId":"396","endLine":50,"endColumn":15},{"ruleId":"456","severity":1,"message":"457","line":96,"column":3,"nodeType":"458","messageId":"427","endLine":96,"endColumn":13},{"ruleId":"456","severity":1,"message":"459","line":106,"column":3,"nodeType":"458","messageId":"427","endLine":106,"endColumn":14},{"ruleId":"456","severity":1,"message":"460","line":109,"column":3,"nodeType":"458","messageId":"427","endLine":109,"endColumn":9},{"ruleId":"393","severity":1,"message":"461","line":120,"column":9,"nodeType":"395","messageId":"396","endLine":120,"endColumn":16},{"ruleId":"393","severity":1,"message":"462","line":122,"column":9,"nodeType":"395","messageId":"396","endLine":122,"endColumn":22},{"ruleId":"440","severity":1,"message":"441","line":140,"column":11,"nodeType":"405","endLine":140,"endColumn":55},{"ruleId":"398","severity":1,"message":"399","line":16,"column":6,"nodeType":"400","endLine":16,"endColumn":8,"suggestions":"463"},{"ruleId":"393","severity":1,"message":"406","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":17},{"ruleId":"393","severity":1,"message":"402","line":9,"column":3,"nodeType":"395","messageId":"396","endLine":9,"endColumn":12},{"ruleId":"393","severity":1,"message":"407","line":12,"column":3,"nodeType":"395","messageId":"396","endLine":12,"endColumn":9},{"ruleId":"393","severity":1,"message":"408","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":13,"endColumn":19},{"ruleId":"393","severity":1,"message":"409","line":14,"column":3,"nodeType":"395","messageId":"396","endLine":14,"endColumn":12},{"ruleId":"393","severity":1,"message":"410","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":11},{"ruleId":"393","severity":1,"message":"411","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"398","severity":1,"message":"412","line":323,"column":6,"nodeType":"400","endLine":323,"endColumn":8,"suggestions":"464"},{"ruleId":"393","severity":1,"message":"465","line":13,"column":8,"nodeType":"395","messageId":"396","endLine":13,"endColumn":17},{"ruleId":"393","severity":1,"message":"466","line":14,"column":8,"nodeType":"395","messageId":"396","endLine":14,"endColumn":23},{"ruleId":"393","severity":1,"message":"467","line":15,"column":8,"nodeType":"395","messageId":"396","endLine":15,"endColumn":16},{"ruleId":"393","severity":1,"message":"468","line":16,"column":8,"nodeType":"395","messageId":"396","endLine":16,"endColumn":18},{"ruleId":"393","severity":1,"message":"469","line":19,"column":8,"nodeType":"395","messageId":"396","endLine":19,"endColumn":21},{"ruleId":"393","severity":1,"message":"470","line":20,"column":8,"nodeType":"395","messageId":"396","endLine":20,"endColumn":18},{"ruleId":"393","severity":1,"message":"471","line":21,"column":8,"nodeType":"395","messageId":"396","endLine":21,"endColumn":23},{"ruleId":"393","severity":1,"message":"472","line":144,"column":17,"nodeType":"395","messageId":"396","endLine":144,"endColumn":25},{"ruleId":"393","severity":1,"message":"430","line":1,"column":22,"nodeType":"395","messageId":"396","endLine":1,"endColumn":31},{"ruleId":"393","severity":1,"message":"415","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":8},{"ruleId":"393","severity":1,"message":"414","line":5,"column":3,"nodeType":"395","messageId":"396","endLine":5,"endColumn":13},{"ruleId":"393","severity":1,"message":"415","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":8},{"ruleId":"393","severity":1,"message":"416","line":20,"column":18,"nodeType":"395","messageId":"396","endLine":20,"endColumn":24},{"ruleId":"393","severity":1,"message":"417","line":115,"column":10,"nodeType":"395","messageId":"396","endLine":115,"endColumn":18},{"ruleId":"393","severity":1,"message":"418","line":115,"column":20,"nodeType":"395","messageId":"396","endLine":115,"endColumn":31},{"ruleId":"393","severity":1,"message":"419","line":116,"column":10,"nodeType":"395","messageId":"396","endLine":116,"endColumn":14},{"ruleId":"398","severity":1,"message":"412","line":143,"column":6,"nodeType":"400","endLine":143,"endColumn":8,"suggestions":"473"},{"ruleId":"393","severity":1,"message":"421","line":212,"column":9,"nodeType":"395","messageId":"396","endLine":212,"endColumn":20},{"ruleId":"393","severity":1,"message":"422","line":216,"column":9,"nodeType":"395","messageId":"396","endLine":216,"endColumn":20},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"442","line":20,"column":8,"nodeType":"395","messageId":"396","endLine":20,"endColumn":18},{"ruleId":"424","severity":1,"message":"425","line":154,"column":28,"nodeType":"426","messageId":"427","endLine":154,"endColumn":30},{"ruleId":"398","severity":1,"message":"412","line":537,"column":6,"nodeType":"400","endLine":537,"endColumn":8,"suggestions":"474"},{"ruleId":"424","severity":1,"message":"425","line":553,"column":33,"nodeType":"426","messageId":"427","endLine":553,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":559,"column":33,"nodeType":"426","messageId":"427","endLine":559,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":565,"column":32,"nodeType":"426","messageId":"427","endLine":565,"endColumn":34},{"ruleId":"393","severity":1,"message":"406","line":7,"column":3,"nodeType":"395","messageId":"396","endLine":7,"endColumn":17},{"ruleId":"393","severity":1,"message":"402","line":10,"column":3,"nodeType":"395","messageId":"396","endLine":10,"endColumn":12},{"ruleId":"393","severity":1,"message":"407","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":13,"endColumn":9},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"410","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"393","severity":1,"message":"416","line":29,"column":19,"nodeType":"395","messageId":"396","endLine":29,"endColumn":25},{"ruleId":"398","severity":1,"message":"412","line":669,"column":6,"nodeType":"400","endLine":669,"endColumn":8,"suggestions":"475"},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"442","line":21,"column":8,"nodeType":"395","messageId":"396","endLine":21,"endColumn":18},{"ruleId":"398","severity":1,"message":"412","line":719,"column":6,"nodeType":"400","endLine":719,"endColumn":8,"suggestions":"476"},{"ruleId":"424","severity":1,"message":"425","line":735,"column":33,"nodeType":"426","messageId":"427","endLine":735,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":741,"column":33,"nodeType":"426","messageId":"427","endLine":741,"endColumn":35},{"ruleId":"424","severity":1,"message":"425","line":747,"column":32,"nodeType":"426","messageId":"427","endLine":747,"endColumn":34},{"ruleId":"393","severity":1,"message":"406","line":7,"column":3,"nodeType":"395","messageId":"396","endLine":7,"endColumn":17},{"ruleId":"393","severity":1,"message":"402","line":10,"column":3,"nodeType":"395","messageId":"396","endLine":10,"endColumn":12},{"ruleId":"393","severity":1,"message":"407","line":13,"column":3,"nodeType":"395","messageId":"396","endLine":13,"endColumn":9},{"ruleId":"393","severity":1,"message":"408","line":14,"column":3,"nodeType":"395","messageId":"396","endLine":14,"endColumn":19},{"ruleId":"393","severity":1,"message":"409","line":15,"column":3,"nodeType":"395","messageId":"396","endLine":15,"endColumn":12},{"ruleId":"393","severity":1,"message":"410","line":16,"column":3,"nodeType":"395","messageId":"396","endLine":16,"endColumn":11},{"ruleId":"393","severity":1,"message":"431","line":20,"column":10,"nodeType":"395","messageId":"396","endLine":20,"endColumn":19},{"ruleId":"393","severity":1,"message":"416","line":29,"column":19,"nodeType":"395","messageId":"396","endLine":29,"endColumn":25},{"ruleId":"393","severity":1,"message":"432","line":83,"column":7,"nodeType":"395","messageId":"396","endLine":83,"endColumn":18},{"ruleId":"393","severity":1,"message":"433","line":400,"column":9,"nodeType":"395","messageId":"396","endLine":400,"endColumn":17},{"ruleId":"393","severity":1,"message":"434","line":624,"column":10,"nodeType":"395","messageId":"396","endLine":624,"endColumn":20},{"ruleId":"393","severity":1,"message":"435","line":625,"column":25,"nodeType":"395","messageId":"396","endLine":625,"endColumn":41},{"ruleId":"398","severity":1,"message":"412","line":648,"column":6,"nodeType":"400","endLine":648,"endColumn":8,"suggestions":"477"},{"ruleId":"398","severity":1,"message":"412","line":57,"column":6,"nodeType":"400","endLine":57,"endColumn":8,"suggestions":"478"},{"ruleId":"393","severity":1,"message":"437","line":1,"column":20,"nodeType":"395","messageId":"396","endLine":1,"endColumn":25},"no-native-reassign",["479"],"no-negated-in-lhs",["480"],"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'TITLE' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["481"],"'TextField' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["482"],"'Typography' is defined but never used.","'Modal' is defined but never used.","'server' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["483"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["484"],["485"],"'useEffect' is defined but never used.","'useParams' is defined but never used.","'FilterPopup' is assigned a value but never used.","'colorSet' is assigned a value but never used.","'filterOpen' is assigned a value but never used.","'setSearchOptions' is assigned a value but never used.",["486"],"'Slide' is defined but never used.","'Feedback' is defined but never used.","'Clients' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Pagination' is defined but never used.",["487"],["488"],["479"],["480"],"'Card' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'feedback' is defined but never used.","'clients' is defined but never used.","'quotes' is defined but never used.","'Footer' is defined but never used.","'stats' is assigned a value but never used.","'features' is assigned a value but never used.","no-dupe-keys","Duplicate key 'topPadding'.","ObjectExpression","Duplicate key 'leftSection'.","Duplicate key 'button'.","'classes' is assigned a value but never used.","'isSmallScreen' is assigned a value but never used.",["489"],["490"],"'ChipInput' is defined but never used.","'DescriptionIcon' is defined but never used.","'FaceIcon' is defined but never used.","'PhoneInput' is defined but never used.","'PasswordInput' is defined but never used.","'EmailInput' is defined but never used.","'FileUploadInput' is defined but never used.","'setPhone' is assigned a value but never used.",["491"],["492"],["493"],["494"],["495"],["496"],"no-global-assign","no-unsafe-negation",{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"499","fix":"501"},{"desc":"499","fix":"502"},{"desc":"499","fix":"503"},{"desc":"499","fix":"504"},{"desc":"499","fix":"505"},{"desc":"499","fix":"506"},{"desc":"497","fix":"507"},{"desc":"499","fix":"508"},{"desc":"499","fix":"509"},{"desc":"499","fix":"510"},{"desc":"499","fix":"511"},{"desc":"499","fix":"512"},{"desc":"499","fix":"513"},{"desc":"499","fix":"514"},"Update the dependencies array to be: [setPopup]",{"range":"515","text":"516"},"Update the dependencies array to be: [getData]",{"range":"517","text":"518"},{"range":"519","text":"518"},{"range":"520","text":"518"},{"range":"521","text":"518"},{"range":"522","text":"518"},{"range":"523","text":"518"},{"range":"524","text":"518"},{"range":"525","text":"516"},{"range":"526","text":"518"},{"range":"527","text":"518"},{"range":"528","text":"518"},{"range":"529","text":"518"},{"range":"530","text":"518"},{"range":"531","text":"518"},{"range":"532","text":"518"},[437,439],"[setPopup]",[8742,8744],"[getData]",[3668,3670],[20021,20023],[1091,1093],[19544,19546],[17125,17127],[22169,22171],[437,439],[8889,8891],[3668,3670],[16631,16633],[20021,20023],[22307,22309],[19455,19457],[1218,1220]]
=======
[{"D:\\React\\IT_CONNECT\\frontend\\src\\index.js":"1","D:\\React\\IT_CONNECT\\frontend\\src\\App.js":"2","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Navbar.js":"3","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Login.js":"4","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Welcome.js":"5","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Applications.js":"6","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Signup.js":"7","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Profile.js":"8","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Home.js":"9","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Logout.js":"10","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js":"11","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js":"12","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"13","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js":"14","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js":"15","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js":"16","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js":"17","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\apiList.js":"18","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js":"19","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Clients.js":"20","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Feedback.js":"21","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js":"22","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Footer.js":"23","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js":"24","D:\\React\\IT_CONNECT\\frontend\\src\\assets\\index.js":"25","D:\\React\\IT_CONNECT\\frontend\\src\\constants\\index.js":"26"},{"size":230,"mtime":1694091397801,"results":"27","hashOfConfig":"28"},{"size":3507,"mtime":1699699372733,"results":"29","hashOfConfig":"28"},{"size":7551,"mtime":1699724448880,"results":"30","hashOfConfig":"28"},{"size":4480,"mtime":1699726831337,"results":"31","hashOfConfig":"28"},{"size":10061,"mtime":1699699380516,"results":"32","hashOfConfig":"28"},{"size":10645,"mtime":1699717413555,"results":"33","hashOfConfig":"28"},{"size":14128,"mtime":1700305676116,"results":"34","hashOfConfig":"28"},{"size":10765,"mtime":1698685716407,"results":"35","hashOfConfig":"28"},{"size":21577,"mtime":1699726732026,"results":"36","hashOfConfig":"28"},{"size":509,"mtime":1694091397723,"results":"37","hashOfConfig":"28"},{"size":523,"mtime":1694091397804,"results":"38","hashOfConfig":"28"},{"size":23207,"mtime":1699699372751,"results":"39","hashOfConfig":"28"},{"size":21682,"mtime":1699708516716,"results":"40","hashOfConfig":"28"},{"size":8926,"mtime":1699721601597,"results":"41","hashOfConfig":"28"},{"size":4491,"mtime":1699712680111,"results":"42","hashOfConfig":"28"},{"size":174,"mtime":1694091397806,"results":"43","hashOfConfig":"28"},{"size":26933,"mtime":1699721601610,"results":"44","hashOfConfig":"28"},{"size":521,"mtime":1694091397805,"results":"45","hashOfConfig":"28"},{"size":1210,"mtime":1694091397802,"results":"46","hashOfConfig":"28"},{"size":592,"mtime":1694095245899,"results":"47","hashOfConfig":"28"},{"size":762,"mtime":1694096513446,"results":"48","hashOfConfig":"28"},{"size":1704,"mtime":1694091397805,"results":"49","hashOfConfig":"28"},{"size":1692,"mtime":1694106620215,"results":"50","hashOfConfig":"28"},{"size":3231,"mtime":1694091397803,"results":"51","hashOfConfig":"28"},{"size":1181,"mtime":1693921201145,"results":"52","hashOfConfig":"28"},{"size":4362,"mtime":1694101908044,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"il2hec",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\React\\IT_CONNECT\\frontend\\src\\index.js",[],["120","121"],"D:\\React\\IT_CONNECT\\frontend\\src\\App.js",["122","123"],"import { createContext, useState } from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport Login from \"./component/Login\";\r\nimport Logout from \"./component/Logout\";\r\nimport Signup from \"./component/Signup\";\r\nimport Home from \"./component/Home\";\r\nimport Applications from \"./component/Applications\";\r\nimport Profile from \"./component/Profile\";\r\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\r\nimport MyJobs from \"./component/recruiter/MyJobs\";\r\nimport JobApplications from \"./component/recruiter/JobApplications\";\r\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\r\nimport RecruiterProfile from \"./component/recruiter/Profile\";\r\nimport MessagePopup from \"./lib/MessagePopup\";\r\nimport isAuth, { userType } from \"./lib/isAuth\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme) => ({\r\n  body: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    minHeight: \"98vh\",\r\n    paddingTop: \"64px\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport const SetPopupContext = createContext();\r\nconst TITLE =\"IT CONNECT\"\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [popup, setPopup] = useState({\r\n    open: false,\r\n    severity: \"\",\r\n    message: \"\",\r\n  });\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      \r\n      <SetPopupContext.Provider value={setPopup}>\r\n      \r\n        <Grid container direction=\"column\">\r\n          <Grid item xs>\r\n            <Navbar />\r\n          </Grid>\r\n          <Grid item className={classes.body}>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Welcome />\r\n              </Route>\r\n              <Route exact path=\"/login\">\r\n                <Login />\r\n              </Route>\r\n              <Route exact path=\"/signup\">\r\n                <Signup />\r\n              </Route>\r\n              <Route exact path=\"/logout\">\r\n                <Logout />\r\n              </Route>\r\n              <Route exact path=\"/home\">\r\n                <Home />\r\n              </Route>\r\n              <Route exact path=\"/applications\">\r\n                <Applications />\r\n              </Route>\r\n             \r\n              <Route exact path=\"/profile\">\r\n                {userType() === \"recruiter\" ? (\r\n                  <RecruiterProfile />\r\n                ) : (\r\n                  <Profile />\r\n                )}\r\n              </Route>\r\n              <Route exact path=\"/addjob\">\r\n                <CreateJobs />\r\n              </Route>\r\n              <Route exact path=\"/myjobs\">\r\n                <MyJobs />\r\n              </Route>\r\n              <Route exact path=\"/job/applications/:jobId\">\r\n                <JobApplications />\r\n              </Route>\r\n              <Route exact path=\"/employees\">\r\n                <AcceptedApplicants />\r\n              </Route>\r\n              <Route>\r\n                <ErrorPage />\r\n              </Route>\r\n            </Switch>\r\n          </Grid>\r\n        </Grid>\r\n        <MessagePopup\r\n          open={popup.open}\r\n          setOpen={(status) =>\r\n            setPopup({\r\n              ...popup,\r\n              open: status,\r\n            })\r\n          }\r\n          severity={popup.severity}\r\n          message={popup.message}\r\n        />\r\n      </SetPopupContext.Provider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Navbar.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Login.js",["124"],"import { useContext, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../index.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\nimport img from './login-img.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: theme.spacing(5),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    margin: \"auto\",\r\n    maxWidth: \"800px\",\r\n  },\r\n  inputBox: {\r\n    width: \"300px\",\r\n    maxWidth: \"300px\",\r\n  },\r\n  submitButton: {\r\n    width: \"200px\",\r\n    maxWidth: \"300px\",\r\n    borderRadius: \"8px\",\r\n    height: \"50px\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [loginDetails, setLoginDetails] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setLoginDetails({\r\n      ...loginDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\r\n      return inputErrorHandler[obj].error;\r\n    });\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.login, loginDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n      <Paper elevation={10} className={classes.body}>\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", margin: \"20px 0px\" }}>\r\n          <img src={img} width=\"300px\" height=\"300px\" alt=\"login\" />\r\n        </div>\r\n        <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n          <Grid item>\r\n            <Typography variant=\"h3\" component=\"h2\" style={{ color: \"#3f51b5\", fontWeight: \"bold\", textAlign: \"center\" }}>\r\n              Welcome back, Login!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <EmailInput\r\n              label=\"Email\"\r\n              value={loginDetails.email}\r\n              onChange={(event) => handleInput(\"email\", event.target.value)}\r\n              inputErrorHandler={inputErrorHandler}\r\n              handleInputError={handleInputError}\r\n              className={classes.inputBox}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <PasswordInput\r\n              label=\"Password\"\r\n              value={loginDetails.password}\r\n              onChange={(event) => handleInput(\"password\", event.target.value)}\r\n              className={classes.inputBox}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleLogin()}\r\n              className={classes.submitButton}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Welcome.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"import React from 'react';\r\nimport { Grid, Typography, Card, CardContent, makeStyles, Button } from \"@material-ui/core\";\r\nimport robotImage from \"./robot.png\"; // Replace with your image URL\r\nimport star from \"./Star.svg\"; // Replace with your icon URLs\r\nimport shield from \"./Shield.svg\";\r\nimport send from \"./Send.svg\";\r\nimport './styles.css';\r\nimport card from \"./card.png\";\r\nimport { feedback } from '../constants'\r\nimport Feedback from './Feedback';\r\nimport Clients from './Clients';\r\nimport { clients } from '../constants'\r\nimport { quotes } from '../assets'\r\nimport Footer from './Footer';\r\nimport { useMediaQuery } from '@material-ui/core';\r\n\r\n\r\nimport people01 from \"./people01.png\";\r\nimport people02 from \"./people02.png\";\r\nimport people03 from \"./people03.png\";\r\n\r\nimport amazon from \"./amazon.png\";\r\nimport microsoft from \"./microsoft.png\";\r\nimport facebook1 from \"./facebook1.png\";\r\nimport google1 from \"./google1.png\";\r\n\r\nimport './welcome.css';\r\n\r\n\r\n\r\n\r\nconst stats = [\r\n  {\r\n    id: \"stats-1\",\r\n    title: \"User Active\",\r\n    value: \"3800+\",\r\n  },\r\n  {\r\n    id: \"stats-2\",\r\n    title: \"Trusted by Company\",\r\n    value: \"230+\",\r\n  },\r\n  {\r\n    id: \"stats-3\",\r\n    title: \"Transaction\",\r\n    value: \"$230M+\",\r\n  },\r\n];\r\n\r\nconst features = [\r\n  {\r\n    id: \"feature-1\",\r\n    icon: star,\r\n    title: \"Rewarding Opportunities\",\r\n    content:\r\n      \"At ITConnect, we provide freelancers and developers with rewarding opportunities that combine promotions and prizes to enhance your career journey.\",\r\n  },\r\n  {\r\n    id: \"feature-2\",\r\n    icon: shield,\r\n    title: \"Secured Collaborations\",\r\n    content:\r\n      \"Your security matters. We take proactive measures to ensure that your information and transactions are protected, fostering a secure environment for collaboration.\",\r\n  },\r\n  {\r\n    id: \"feature-3\",\r\n    icon: send,\r\n    title: \"Streamlined Project Transfers\",\r\n    content:\r\n      \"Managing projects becomes effortless. With our streamlined process, you can transfer projects seamlessly, optimizing efficiency and saving valuable time and resources.\",\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    backgroundColor: \"black\", // Background color of the cards\r\n    color: \"white\",\r\n    padding: theme.spacing(2), // Adjust padding here\r\n    borderRadius: theme.spacing(2), // Add rounded corners\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\", // Add a subtle box shadow\r\n  },\r\n\r\n  leftSection: {\r\n     textAlign: 'center',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(2), // Increase left margin\r\n    },\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  topPadding: {\r\n    paddingTop: theme.spacing(2),\r\n  },\r\n\r\n  topPadding: {\r\n    paddingTop: theme.spacing(4), // Add top padding between image and cards\r\n  },\r\n  cardText: {\r\n    fontSize: \"15px\", // Increase font size\r\n    color: \"white\", // Set text color to white\r\n  },\r\n  cardTitle: {\r\n    color: \"#4fc3f7\", // Set the title color to sky blue\r\n  },\r\n  leftSection: {\r\n    padding: \"30px\",\r\n  },\r\n  button: {\r\n    marginTop: \"20px\",\r\n    backgroundColor: \"#4fc3f7\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3f8cb5\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Welcome = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const isSmallScreen = useMediaQuery('(max-width:600px)');\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"hero-section\">\r\n      <div className=\"hero-content\">\r\n        <div className=\"left-content\">\r\n          <h1 className=\"company-title\">IT CONNECT</h1>\r\n          <p className=\"intro\">\r\n            Are you looking to get hired? Why not take an AI-based test to showcase your skills and stand out from the crowd! Unlock your potential with AI-based tests for hiring success. Embrace the future, showcase your skills, and stand out!\r\n            <br /><br />\r\n            In today's competitive job market, it's crucial to demonstrate your expertise. Our AI-powered testing platform allows you to highlight your capabilities and increase your chances of landing your dream job.\r\n            <br /><br />\r\n            Join us in this exciting journey toward career excellence.\r\n          </p>\r\n          <button className=\"learn-more-button\">Learn More</button>\r\n        </div>\r\n        <div className=\"right-content\">\r\n          <img src={robotImage} alt=\"Company Image\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <section class=\"stats-section\">\r\n    <div class=\"stat-box\">\r\n      <h4 class=\"stat-value\">3800+</h4>\r\n      <p class=\"stat-title\">User Active</p>\r\n    </div>\r\n    <div class=\"stat-box\">\r\n      <h4 class=\"stat-value\">230+</h4>\r\n      <p class=\"stat-title\">Trusted by Company</p>\r\n    </div>\r\n    <div class=\"stat-box\">\r\n      <h4 class=\"stat-value\">$230M+</h4>\r\n      <p class=\"stat-title\">Transaction</p>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"section\">\r\n    <div class=\"sectionInfo\">\r\n      <h2 class=\"heading2\">Your Projects,<br></br> Our Talent Ecosystem.</h2>\r\n      <p class=\"paragraph\">\r\n        At ITConnect, we understand the value of your time and expertise. Focus on your business goals while we take care of your financial needs. With the right solutions, you can enhance your financial journey by building credit, earning rewards, and optimizing savings. Navigate the vast landscape of financial options confidently, even with countless choices available. Let us empower you with the tools and guidance to make informed decisions.\r\n      </p>\r\n      <button type=\"button\" class=\"btn-small\">Learn More</button>\r\n\r\n    </div>\r\n    <div class=\"sectionImg\">\r\n      <div class=\"feature-card\">\r\n        <img src={star} alt=\"Icon 1\" />\r\n        <div>\r\n          <h4>Rewarding Opportunities</h4>\r\n          <p>\r\n            At ITConnect, we provide freelancers and developers with rewarding opportunities that combine promotions and prizes to enhance your career journey.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"feature-card\">\r\n        <img src={shield} alt=\"Icon 2\" />\r\n        <div>\r\n          <h4>Secured Collaborations</h4>\r\n          <p>\r\n            Your security matters. We take proactive measures to ensure that your information and transactions are protected, fostering a secure environment for collaboration.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"feature-card\">\r\n        <img src={send} alt=\"Icon 3\" />\r\n        <div>\r\n          <h4>Streamlined Project Transfers</h4>\r\n          <p>\r\n            Managing projects becomes effortless. With our streamlined process, you can transfer projects seamlessly, optimizing efficiency and saving valuable time and resources.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"card-deal-section\">\r\n    <div class=\"sectionInfo\">\r\n      <h2 class=\"heading2\">Discover Ideal Roles</h2>\r\n      <p class=\"paragraph\">\r\n        Ready for a more fulfilling career? Unlock opportunities by identifying your strengths, exploring new industries, and connecting with professionals. Tailor your skills and passions to find the role that suits you best.\r\n      </p>\r\n      <button type=\"button\" class=\"btn\">View Roles</button>\r\n    </div>\r\n    <div class=\"sectionImgcard\">\r\n      <img src={card} alt=\"card\" />\r\n    </div>\r\n  </section>\r\n\r\n\r\n  <section class=\"testimonial-section\">\r\n    <div class=\"bg-circle-testimonial\"></div>\r\n    <h2 class=\"heading2-testimonial\">What our clients have to say</h2>\r\n    <p class=\"paragraph-testimonial\">\r\n      Discover how Virtual IT Company has revolutionized their business with cutting-edge virtual technology and unparalleled support.\r\n    </p>\r\n    <div class=\"feedback-container-testimonial\">\r\n  <div class=\"feedback-card-testimonial\">\r\n    <img src={people01} alt=\"Person 1\" />\r\n    <h4>Harshita Chhangani</h4>\r\n    <p>CEO, TechPro Solutions</p>\r\n    <p>\r\n      Virtual IT Company transformed our business. Top-notch virtual technology and team collaboration tools streamlined operations efficiently.\r\n    </p>\r\n  </div>\r\n  <div class=\"feedback-card-testimonial\">\r\n    <img src={people02} alt=\"Person 2\" />\r\n    <h4>Vaishnavi Arthamwar</h4>\r\n    <p>CTO, InnovateX</p>\r\n    <p>\r\n      Best decision partnering with Virtual IT Company. Cloud computing and AI-based solutions improved productivity, reduced costs.\r\n    </p>\r\n  </div>\r\n  <div class=\"feedback-card-testimonial\">\r\n    <img src={people03} alt=\"Person 3\" />\r\n    <h4>Akshay Chame</h4>\r\n    <p>Co-Founder, NexGen Startups</p>\r\n    <p>\r\n      Reliable IT support for startups. Virtual IT Company's flexible plans enable focus on growth and innovation.\r\n    </p>\r\n  </div>\r\n</div>\r\n  </section>\r\n  <section id=\"clients\" class=\"my-4 flexCenter\">\r\n    <div class=\"flexCenter\">\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={amazon} alt=\"Amazon Logo\" />\r\n      </div>\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={microsoft} alt=\"Microsoft Logo\" />\r\n      </div>\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={google1} alt=\"Google Logo\" />\r\n      </div>\r\n      <div class=\"client-logo mx-2\">\r\n        <img src={facebook1} alt=\"Facebook Logo\" />\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"cta-container\">\r\n    <div class=\"cta-section\">\r\n      <div class=\"cta-content\">\r\n        <h2>Let's try our service now!</h2>\r\n        <p>Everything you need is Sign up, Choose a role, Apply, Give a test, and Grab an opportunity!</p>\r\n      </div>\r\n      <div class=\"cta-button\">\r\n        <button type=\"button\">Apply Now</button>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <footer>\r\n  <div class=\"footer-container\">\r\n    <p>&copy; 2023 Your Website Name</p>\r\n  </div>\r\n</footer>\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport const ErrorPage = (props) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Error 404</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n\r\n\r\n\r\n\r\n\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Applications.js",["142","143","144","145","146","147","148","149"],"import {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport { SetPopupContext } from \"../App\";\r\nimport apiList from \"../lib/apiList\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\",\r\n    transition: \"transform 0.2s ease-in-out\",\r\n    \"&:hover\": {\r\n      transform: \"scale(1.02)\",\r\n    },\r\n  },\r\n  jobTitle: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.25rem\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  statusBlock: {\r\n    width: \"fit-content\",\r\n    padding: \"5px 10px\",\r\n    borderRadius: \"5px\",\r\n    color: \"white\",\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  dateInfo: {\r\n    fontSize: \"0.875rem\",\r\n    color: \"#888\",\r\n    marginTop: \"5px\",\r\n  },\r\n  chip: {\r\n    marginRight: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  rateButton: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  modalPaper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    outline: \"none\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  modalCloseButton: {\r\n    position: \"absolute\",\r\n    top: \"10px\",\r\n    right: \"10px\",\r\n  },\r\n  ratingLabel: {\r\n    fontSize: \"1rem\",\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  ratingSlider: {\r\n    width: \"80%\",\r\n  },\r\n  rateSubmitButton: {\r\n    marginTop: \"10px\",\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3} style={{ height: \"400px\"}}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\" className={classes.jobTitle}>\r\n              {application.job.title}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Posted By: {application.recruiter.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">Role: {application.job.jobType}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Salary: &#8377; {application.job.salary} per month\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\">\r\n              Duration:{\" \"}\r\n              {application.job.duration !== 0\r\n                ? `${application.job.duration} month`\r\n                : `Flexible`}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <div>\r\n              {application.job.skillsets.map((skill) => (\r\n                <Chip\r\n                  key={skill}\r\n                  label={skill}\r\n                  className={classes.chip}\r\n                  variant=\"outlined\"\r\n                />\r\n              ))}\r\n            </div>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n              Applied On: {appliedOn.toLocaleDateString()}\r\n            </Typography>\r\n            {application.status === \"accepted\" ||\r\n              application.status === \"finished\" ? (\r\n              <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n                Joined On: {joinedOn.toLocaleDateString()}\r\n              </Typography>\r\n            ) : null}\r\n            {/* Move the status block here */}\r\n            Status:\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.dateInfo}\r\n              style={{\r\n                color: colorSet[application.status],\r\n                marginTop: \"5px\",\r\n                fontWeight: \"bold\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n               {application.status}\r\n            </Typography>\r\n            {application.status === \"accepted\" || application.status === \"finished\" ? (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.rateButton}\r\n                onClick={() => {\r\n                  fetchRating();\r\n                  setOpen(true);\r\n                }}\r\n                style={{ marginTop: \"10px\" }}\r\n              >\r\n                Rate Job\r\n              </Button>\r\n            </Grid>\r\n          ) : null}\r\n          </Grid>\r\n        </Grid>\r\n        \r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.modal}>\r\n        <Paper className={classes.modalPaper}>\r\n          <IconButton\r\n            edge=\"end\"\r\n            color=\"inherit\"\r\n            onClick={handleClose}\r\n            className={classes.modalCloseButton}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.ratingLabel}>\r\n            Rate this Job\r\n          </Typography>\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            className={classes.ratingSlider}\r\n            value={rating === -1 ? null : rating}\r\n            precision={0.5}\r\n            emptyIcon={<StarIcon fontSize=\"inherit\" />}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.rateSubmitButton}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit Rating\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n    container\r\n    item\r\n    direction=\"column\"\r\n    alignItems=\"center\"\r\n    style={{\r\n      padding: \"30px\",\r\n      minHeight: \"93vh\",\r\n      // backgroundColor: \"#ffffff\",\r\n    }}\r\n  >\r\n    <Grid item>\r\n      <Typography variant=\"h2\" style={{ color: \"#6f\", fontWeight: \"bold\" }}>\r\n        Applications\r\n      </Typography>\r\n    </Grid>\r\n\r\n    <Grid\r\n      container\r\n      item\r\n      xs\r\n      direction=\"row\"\r\n      spacing={2}\r\n      style={{ width: \"100%\" }}\r\n      alignItems=\"stretch\"  // Set alignItems to stretch\r\n      justify=\"center\"\r\n    >\r\n      {applications.length > 0 ? (\r\n        applications.map((obj, index) => (\r\n          <Grid item key={obj._id} xs={12} sm={6} md={4}>\r\n            <ApplicationTile application={obj} />\r\n          </Grid>\r\n        ))\r\n      ) : (\r\n        <Typography\r\n          variant=\"h5\"\r\n          style={{\r\n            height: \"50px\",\r\n            textAlign: \"center\",\r\n            background: \"rgba(255,255,255,0.5)\",\r\n            marginLeft: \"25%\",\r\n            marginRight: \"25%\",\r\n            paddingTop: \"15px\",\r\n          }}\r\n        >\r\n          No Applications Found\r\n        </Typography>\r\n      )}\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Signup.js",["150","151"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Profile.js",["152","153","154","155","156","157","158","159","160"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList, {server} from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n  avatar: {\r\n    alignSelf:\"center\",\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid item container className={classes.inputBox} key={key}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add another institution details\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [userData, setUserData] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n  });\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        if (response.data.education.length > 0) {\r\n          setEducation(\r\n            response.data.education.map((edu) => ({\r\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\r\n              startYear: edu.startYear ? edu.startYear : \"\",\r\n              endYear: edu.endYear ? edu.endYear : \"\",\r\n            }))\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        //console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n   \r\n  const getResume= ()=>{\r\n    const address = `${profileDetails.resume}`;\r\n    console.log(address)\r\n    if(address!==\"\")\r\n    {\r\n      window.open(address)\r\n      // console.log(error);\r\n        \r\n    }else{\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"You have not uploaded any resume. Upload one to view!\",\r\n      });\r\n    }\r\n    \r\n    // axios(address, {\r\n    //   method: \"GET\",\r\n    //   responseType: \"blob\",\r\n    // })\r\n    //   .then((response) => {\r\n    //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n    //     const fileURL = URL.createObjectURL(file);\r\n    //     window.open(fileURL);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //     setPopup({\r\n    //       open: true,\r\n    //       severity: \"error\",\r\n    //       message: \"You have not uploaded any resume. Upload one to view!\",\r\n    //     });\r\n    //   });\r\n  }\r\n\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const editDetails = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n    setOpen(false);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        \r\n        <Grid item xs>\r\n          <Paper\r\n            style={{\r\n              padding: \"20px\",\r\n              outline: \"none\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Grid\r\n                container direction=\"column\" alignItems=\"center\" \r\n                xs={2}\r\n                style={{\r\n                  display:\"center\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  float:\"left\",\r\n                }}\r\n              >\r\n                <Avatar\r\n                  src={`${profileDetails.profile}`}\r\n                  className={classes.avatar}\r\n                  \r\n                />\r\n                \r\n              </Grid>\r\n            <Grid container direction=\"column\" alignItems=\"\" spacing={3}>\r\n            \r\n            {/* <Grid item >\r\n              \r\n            </Grid> */}\r\n            \r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  value={profileDetails.name}\r\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\r\n                  className={classes.inputBox}\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <MultifieldInput\r\n                education={education}\r\n                setEducation={setEducation}\r\n              />\r\n              <Grid item>\r\n                <ChipInput\r\n                  className={classes.inputBox}\r\n                  label=\"Skills\"\r\n                  variant=\"outlined\"\r\n                  helperText=\"Press enter to add skills\"\r\n                  value={profileDetails.skills}\r\n                  onAdd={(chip) =>\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: [...profileDetails.skills, chip],\r\n                    })\r\n                  }\r\n                  onDelete={(chip, index) => {\r\n                    let skills = profileDetails.skills;\r\n                    skills.splice(index, 1);\r\n                    setProfileDetails({\r\n                      ...profileDetails,\r\n                      skills: skills,\r\n                    });\r\n                  }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Resume (Images only)\"\r\n                  icon={<DescriptionIcon />}\r\n                  uploadTo={apiList.uploadResume}\r\n                  handleInput={handleInput}\r\n                  identifier={\"resume\"}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                className={classes.statusBlock}\r\n                color=\"primary\"\r\n                onClick={() => getResume()}\r\n                style={{alignItems:\"center\"}}\r\n              >\r\n                View Uploaded Resume\r\n              </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <FileUploadInput\r\n                  className={classes.inputBox}\r\n                  label=\"Profile Photo (.jpg/.png)\"\r\n                  icon={<FaceIcon />}\r\n                  uploadTo={apiList.uploadProfileImage}\r\n                  handleInput={handleInput}\r\n                  identifier={\"profile\"}\r\n                />\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\", marginTop: \"30px\",borderRadius:\"8px\",height:\"50px\"}}\r\n              onClick={() => handleUpdate()}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Home.js",["161","162","163","164","165","166","167"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n    <Typography variant=\"h5\">{job.title}</Typography>\r\n    <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n    <div>Role: {job.jobType}</div>\r\n    <div>Salary: &#8377; {job.salary} per month</div>\r\n    <div>\r\n      Duration: {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n    </div>\r\n    <div>Posted By: {job.recruiter.name}</div>\r\n    <div>Application Deadline: {deadline}</div>\r\n\r\n    <div>\r\n      {job.skillsets.map((skill) => (\r\n        <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n      ))}\r\n    </div>\r\n\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      className={classes.button}\r\n      onClick={() => setOpen(true)}\r\n      disabled={userType() === \"recruiter\"}\r\n    >\r\n      Apply\r\n    </Button>\r\n\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n != \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n  </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4} lg={3}>\r\n  <TextField\r\n    label=\"Search Jobs\"\r\n    value={searchOptions.query}\r\n    onChange={(event) =>\r\n      setSearchOptions({\r\n        ...searchOptions,\r\n        query: event.target.value,\r\n      })\r\n    }\r\n    onKeyPress={(ev) => {\r\n      if (ev.key === \"Enter\") {\r\n        getData();\r\n      }\r\n    }}\r\n    InputProps={{\r\n      endAdornment: (\r\n        <InputAdornment>\r\n          <IconButton onClick={() => getData()}>\r\n            <SearchIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      ),\r\n    }}\r\n    style={{ width: \"100%\", maxWidth: \"500px\", backgroundColor: \"white\", borderRadius: \"12px\" }}\r\n    variant=\"outlined\"\r\n  />\r\n</Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {jobs.length > 0 ? (\r\n          // Use the Grid component to arrange JobTile instances in rows of three\r\n          <Grid container spacing={3}>\r\n            {jobs.map((job, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <JobTile job={job} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n              marginLeft: \"25%\",\r\n              marginRight: \"25%\",\r\n              paddingTop: \"15px\",\r\n            }}\r\n          >\r\n            No jobs found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n        {/* <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Logout.js",["168"],"import { useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nconst Logout = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"type\");\r\n    setPopup({\r\n      open: true,\r\n      severity: \"success\",\r\n      message: \"Logged out successfully\",\r\n    });\r\n  }, []);\r\n  return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default Logout;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js",["169"],"import { Snackbar, Slide } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst MessagePopup = (props) => {\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    props.setOpen(false);\r\n  };\r\n  return (\r\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\r\n      <Alert onClose={handleClose} severity={props.severity}>\r\n        {props.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default MessagePopup;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js",["170","171","172","173","174","175","176"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfApplication\"\r\n                    checked={searchOptions.sort.dateOfApplication.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfApplication\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfApplication\">\r\n                    <Typography>Date of Application</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfApplication.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            desc: !searchOptions.sort.dateOfApplication.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfApplication.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      window.open(address)\r\n      // axios(address, {\r\n      //   method: \"GET\",\r\n      //   responseType: \"blob\",\r\n      // })\r\n      //   .then((response) => {\r\n      //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n      //     const fileURL = URL.createObjectURL(file);\r\n      //     window.open(fileURL);\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error);\r\n      //     setPopup({\r\n      //       open: true,\r\n      //       severity: \"error\",\r\n      //       message: \"Error\",\r\n      //     });\r\n      //   });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  const buttonSet = {\r\n    applied: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"shortlisted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"shortlisted\")}\r\n          >\r\n            Shortlist\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    shortlisted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"accepted\")}\r\n          >\r\n            Accept\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    rejected: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Rejected\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    accepted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Accepted\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    cancelled: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"cancelled\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Cancelled\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    finished: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"finished\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Finished\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            Education:{\" \"}\r\n            {application.jobApplicant.education\r\n              .map((edu) => {\r\n                return `${edu.institutionName} (${edu.startYear}-${\r\n                  edu.endYear ? edu.endYear : \"Ongoing\"\r\n                })`;\r\n              })\r\n              .join(\", \")}\r\n          </Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              onClick={() => getResume()}\r\n            >\r\n              Download Resume\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs>\r\n            {buttonSet[application.status]}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            // onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst JobApplications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const { jobId } = useParams();\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    status: {\r\n      all: false,\r\n      applied: false,\r\n      shortlisted: false,\r\n    },\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfApplication: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n\r\n    if (searchOptions.status.rejected) {\r\n      searchParams = [...searchParams, `status=rejected`];\r\n    }\r\n    if (searchOptions.status.applied) {\r\n      searchParams = [...searchParams, `status=applied`];\r\n    }\r\n    if (searchOptions.status.shortlisted) {\r\n      searchParams = [...searchParams, `status=shortlisted`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}?jobId=${jobId}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}&${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Applications</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton onClick={() => setFilterOpen(true)}>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          style={{ width: \"100%\" }}\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{height:\"50px\", textAlign: \"center\",\r\n            background:\"rgba(255,255,255,0.5)\",marginLeft:\"25%\",marginRight:\"25%\",paddingTop:\"15px\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobApplications;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["177","178","179","180","181","182","183","184","185","186","187","188","189"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  \r\n  popupDialog: {\r\n    \r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"20px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexGrow: 1,\r\n  },\r\n  cardButtons: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: \"10px\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n  root: {\r\n    padding: \"30px\",\r\n    minHeight: \"93vh\",\r\n  },\r\n}));\r\n\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, applicantId: application.jobApplicant.userId },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      window.open(address)\r\n      // axios(address, {\r\n      //   method: \"GET\",\r\n      //   responseType: \"blob\",\r\n      // })\r\n      //   .then((response) => {\r\n      //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n      //     const fileURL = URL.createObjectURL(file);\r\n      //     window.open(fileURL);\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error);\r\n      //     setPopup({\r\n      //       open: true,\r\n      //       severity: \"error\",\r\n      //       message: \"Error\",\r\n      //     });\r\n      //   });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n\r\n  return (\r\n\r\n\r\n\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Avatar src={`${application.jobApplicant.profile}`} className={classes.avatar} />\r\n\r\n      <div className={classes.cardContent}>\r\n        <Typography variant=\"h5\">{application.jobApplicant.name}</Typography>\r\n        <Rating\r\n          value={application.jobApplicant.rating !== -1 ? application.jobApplicant.rating : null}\r\n          readOnly\r\n        />\r\n        <Typography>Job Title: {application.job.title}</Typography>\r\n        <Typography>Role: {application.job.jobType}</Typography>\r\n        <Typography>Applied On: {appliedOn.toLocaleDateString()}</Typography>\r\n        <Typography>SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}</Typography>\r\n        {application.jobApplicant.skills.map((skill, index) => (\r\n          <Chip label={skill} style={{ marginRight: \"2px\" }} key={index} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className={classes.cardButtons}>\r\n  <Button\r\n    variant=\"contained\"\r\n    className={classes.statusBlock}\r\n    color=\"primary\"\r\n    onClick={() => getResume()}\r\n    style={{ marginRight: '8px' }} // Add margin to the right\r\n  >\r\n    Resume\r\n  </Button>\r\n\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    className={classes.statusBlock}\r\n    style={{\r\n      background: \"#09BC8A\",\r\n      marginRight: '8px', // Add margin to the right\r\n    }}\r\n    onClick={() => {\r\n      setOpenEndJob(true);\r\n    }}\r\n  >\r\n    Fire\r\n  </Button>\r\n\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    className={classes.statusBlock}\r\n    onClick={() => {\r\n      setOpen(true);\r\n    }}\r\n  >\r\n    Rate\r\n  </Button>\r\n</div>\r\n\r\n\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal open={openEndJob} onClose={handleCloseEndJob} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n        Employees\r\n      </Typography>\r\n      <IconButton onClick={() => setFilterOpen(true)}>\r\n        <FilterListIcon />\r\n      </IconButton>\r\n      <Grid container spacing={2}>\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item xs={12} sm={6} md={4} key={obj._id}>\r\n              <ApplicationTile application={obj} getData={getData} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n            }}\r\n          >\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js",["190","191"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      paddingTop: \"60px\",\r\n      fontSize: \"1.5rem\",\r\n    },\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      fontSize: \"2rem\",\r\n      paddingTop: \"34px\",\r\n    },\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      fontSize: \"2.5rem\",\r\n    },\r\n    [theme.breakpoints.up(\"lg\")]: {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateJobs = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [jobDetails, setJobDetails] = useState({\r\n    title: \"\",\r\n    maxApplicants: 100,\r\n    maxPositions: 30,\r\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .substr(0, 16),\r\n    skillsets: [],\r\n    jobType: \"Full Time\",\r\n    duration: 0,\r\n    salary: 0,\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(jobDetails);\r\n    axios\r\n      .post(apiList.jobs, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        setJobDetails({\r\n          title: \"\",\r\n          maxApplicants: 100,\r\n          maxPositions: 30,\r\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .substr(0, 16),\r\n          skillsets: [],\r\n          jobType: \"Full Time\",\r\n          duration: 0,\r\n          salary: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n        xs={12} sm={10} md={8} lg={6} // Adjust these values based on your design\r\n      >\r\n\r\n        <Grid item>\r\n          <Typography variant=\"h2\" className={classes.title} align=\"center\">\r\n            Add Job\r\n          </Typography>\r\n\r\n        </Grid>\r\n        <Grid container direction=\"column\" justify=\"center\" spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Paper\r\n              style={{\r\n                padding: \"8px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                width: \"100%\", // Adjust this value based on your design\r\n              }}\r\n            >\r\n\r\n              <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    value={jobDetails.title}\r\n                    onChange={(event) =>\r\n                      handleInput(\"title\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.skillsets}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: [...jobDetails.skillsets, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let skillsets = jobDetails.skillsets;\r\n                      skillsets.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: skillsets,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Job Type\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.jobType}\r\n                    onChange={(event) => {\r\n                      handleInput(\"jobType\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\r\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\r\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    label=\"Duration\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.duration}\r\n                    onChange={(event) => {\r\n                      handleInput(\"duration\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value={0}>Flexible</MenuItem>\r\n                    <MenuItem value={1}>1 Month</MenuItem>\r\n                    <MenuItem value={3}>3 Months</MenuItem>\r\n                    <MenuItem value={6}>6 Months</MenuItem>\r\n                    <MenuItem value={12}>1 Year</MenuItem>\r\n                    <MenuItem value={24}>2 Years</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Salary\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.salary}\r\n                    onChange={(event) => {\r\n                      handleInput(\"salary\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Application Deadline\"\r\n                    type=\"datetime-local\"\r\n                    value={jobDetails.deadline}\r\n                    onChange={(event) => {\r\n                      handleInput(\"deadline\", event.target.value);\r\n                    }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Maximum Number Of Applicants\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxApplicants}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxApplicants\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Positions Available\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxPositions}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxPositions\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 20px\", marginTop: \"30px\", width: \"100%\" }}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Create Job\r\n              </Button>\r\n\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJobs;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js",["192"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  TextField,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\"; // Import the stylesheet\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  customGridItem: {\r\n    flexBasis: \"100%\",\r\n    maxWidth: \"80%\",\r\n  },\r\n  updateButton: {\r\n    width: \"100%\",\r\n    maxWidth: \"100%\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Profile = () => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const classes = useStyles();\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        setPhone(response.data.contactNumber);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...profileDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ minHeight: \"100vh\" }}>\r\n      <Grid item xs={12} sm={8} md={6} lg={4} className={classes.customGridItem}>\r\n        <Paper className={classes.paper}>\r\n          <Typography variant=\"h3\" component=\"h2\" style={{ color: \"#3f51b5\", fontWeight: \"bold\", marginBottom: \"20px\" }}>\r\n            Profile\r\n          </Typography>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={profileDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            style={{ marginBottom: \"20px\" }}\r\n          />\r\n          <TextField\r\n            label=\"Bio (up to 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            variant=\"outlined\"\r\n            value={profileDetails.bio}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n !== \"\";\r\n                }).length <= 250\r\n              ) {\r\n                handleInput(\"bio\", event.target.value);\r\n              }\r\n            }}\r\n            fullWidth\r\n            style={{ marginBottom: \"20px\" }}\r\n          />\r\n          <PhoneInput\r\n            country={\"in\"}\r\n            value={phone}\r\n            onChange={(phone) => setPhone(phone)}\r\n            inputProps={{\r\n              style: { width: \"100%\", marginBottom: \"20px\" },\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.updateButton}\r\n            onClick={() => handleUpdate()}\r\n          >\r\n            Update Details\r\n          </Button>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js",["193","194","195","196","197","198"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n\r\n    \r\n    \"&:hover\": {\r\n      backgroundColor: \"gray\", \r\n      color:\"white\",// Change background color on hover\r\n    },\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n}));\r\n\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { job, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [openUpdate, setOpenUpdate] = useState(false);\r\n  const [jobDetails, setJobDetails] = useState(job);\r\n\r\n  console.log(jobDetails);\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleClick = (location) => {\r\n    history.push(location);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    console.log(job._id);\r\n    axios\r\n      .delete(`${apiList.jobs}/${job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const handleJobUpdate = () => {\r\n    axios\r\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleCloseUpdate();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleCloseUpdate();\r\n      });\r\n  };\r\n\r\n  const postedOn = new Date(job.dateOfPosting);\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container direction=\"column\">\r\n        <Grid item xs>\r\n          <Typography variant=\"h5\">{job.title}</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n        </Grid>\r\n        <Grid item>Role : {job.jobType}</Grid>\r\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\r\n          <Grid item>\r\n            Duration :{\" \"}\r\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n          </Grid>\r\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\r\n          <Grid item>\r\n            Remaining Number of Positions:{\" \"}\r\n            {job.maxPositions - job.acceptedCandidates}\r\n          </Grid>\r\n        <Grid item xs>\r\n          {job.skillsets.map((skill) => (\r\n            <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n          ))}\r\n        </Grid>\r\n        <Grid item container justify=\"space-between\" alignItems=\"flex-end\" spacing={2}>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\r\n            >\r\n              View Applications\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpenUpdate(true);\r\n              }}\r\n              style={{\r\n                background: \"#FC7A1E\",\r\n                color: \"#fff\",\r\n              }}\r\n            >\r\n              Update Details\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Delete Job\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleDelete()}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleClose()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openUpdate}\r\n        onClose={handleCloseUpdate}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Update Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            spacing={3}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            <Grid item>\r\n              <TextField \r\n                label=\"Application Deadline\"\r\n                type=\"datetime-local\"\r\n                value={jobDetails.deadline.substr(0, 16)}\r\n                onChange={(event) => {\r\n                  handleInput(\"deadline\", event.target.value);\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Maximum Number Of Applicants\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxApplicants}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxApplicants\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Positions Available\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxPositions}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxPositions\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleJobUpdate()}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseUpdate()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst MyJobs = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [`myjobs=1`];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>My Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4} lg={3}>\r\n  <TextField\r\n    label=\"Search Jobs\"\r\n    value={searchOptions.query}\r\n    onChange={(event) =>\r\n      setSearchOptions({\r\n        ...searchOptions,\r\n        query: event.target.value,\r\n      })\r\n    }\r\n    onKeyPress={(ev) => {\r\n      if (ev.key === \"Enter\") {\r\n        getData();\r\n      }\r\n    }}\r\n    InputProps={{\r\n      endAdornment: (\r\n        <InputAdornment>\r\n          <IconButton onClick={() => getData()}>\r\n            <SearchIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      ),\r\n    }}\r\n    style={{ width: \"100%\", maxWidth: \"500px\", backgroundColor: \"white\", borderRadius: \"12px\" }}\r\n    variant=\"outlined\"\r\n  />\r\n</Grid>\r\n\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"row\" // Display job cards in a row\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n          spacing={2} // Add spacing between cards\r\n        >\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => (\r\n              <Grid item xs={12} sm={6} md={4} key={job._id}> {/* Display 3 cards per row on large screens */}\r\n                <JobTile job={job} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{\r\n              height: \"50px\", textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\", marginLeft: \"25%\", marginRight: \"25%\", paddingTop: \"15px\"\r\n            }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyJobs;","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\apiList.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Clients.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Feedback.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Footer.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\assets\\index.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\constants\\index.js",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":19,"column":8,"nodeType":"205","messageId":"206","endLine":19,"endColumn":14},{"ruleId":"203","severity":1,"message":"207","line":36,"column":7,"nodeType":"205","messageId":"206","endLine":36,"endColumn":12},{"ruleId":"203","severity":1,"message":"208","line":4,"column":3,"nodeType":"205","messageId":"206","endLine":4,"endColumn":12},{"ruleId":"203","severity":1,"message":"209","line":2,"column":28,"nodeType":"205","messageId":"206","endLine":2,"endColumn":32},{"ruleId":"203","severity":1,"message":"210","line":2,"column":34,"nodeType":"205","messageId":"206","endLine":2,"endColumn":45},{"ruleId":"203","severity":1,"message":"211","line":2,"column":59,"nodeType":"205","messageId":"206","endLine":2,"endColumn":65},{"ruleId":"203","severity":1,"message":"212","line":9,"column":10,"nodeType":"205","messageId":"206","endLine":9,"endColumn":18},{"ruleId":"203","severity":1,"message":"213","line":10,"column":8,"nodeType":"205","messageId":"206","endLine":10,"endColumn":16},{"ruleId":"203","severity":1,"message":"214","line":11,"column":8,"nodeType":"205","messageId":"206","endLine":11,"endColumn":15},{"ruleId":"203","severity":1,"message":"215","line":12,"column":10,"nodeType":"205","messageId":"206","endLine":12,"endColumn":17},{"ruleId":"203","severity":1,"message":"216","line":13,"column":10,"nodeType":"205","messageId":"206","endLine":13,"endColumn":16},{"ruleId":"203","severity":1,"message":"217","line":14,"column":8,"nodeType":"205","messageId":"206","endLine":14,"endColumn":14},{"ruleId":"203","severity":1,"message":"218","line":32,"column":7,"nodeType":"205","messageId":"206","endLine":32,"endColumn":12},{"ruleId":"203","severity":1,"message":"219","line":50,"column":7,"nodeType":"205","messageId":"206","endLine":50,"endColumn":15},{"ruleId":"220","severity":1,"message":"221","line":96,"column":3,"nodeType":"222","messageId":"223","endLine":96,"endColumn":13},{"ruleId":"220","severity":1,"message":"224","line":106,"column":3,"nodeType":"222","messageId":"223","endLine":106,"endColumn":14},{"ruleId":"220","severity":1,"message":"225","line":109,"column":3,"nodeType":"222","messageId":"223","endLine":109,"endColumn":9},{"ruleId":"203","severity":1,"message":"226","line":120,"column":9,"nodeType":"205","messageId":"206","endLine":120,"endColumn":16},{"ruleId":"203","severity":1,"message":"227","line":122,"column":9,"nodeType":"205","messageId":"206","endLine":122,"endColumn":22},{"ruleId":"228","severity":1,"message":"229","line":140,"column":11,"nodeType":"230","endLine":140,"endColumn":55},{"ruleId":"203","severity":1,"message":"231","line":6,"column":3,"nodeType":"205","messageId":"206","endLine":6,"endColumn":17},{"ruleId":"203","severity":1,"message":"208","line":9,"column":3,"nodeType":"205","messageId":"206","endLine":9,"endColumn":12},{"ruleId":"203","severity":1,"message":"232","line":12,"column":3,"nodeType":"205","messageId":"206","endLine":12,"endColumn":9},{"ruleId":"203","severity":1,"message":"233","line":13,"column":3,"nodeType":"205","messageId":"206","endLine":13,"endColumn":19},{"ruleId":"203","severity":1,"message":"234","line":14,"column":3,"nodeType":"205","messageId":"206","endLine":14,"endColumn":12},{"ruleId":"203","severity":1,"message":"235","line":15,"column":3,"nodeType":"205","messageId":"206","endLine":15,"endColumn":11},{"ruleId":"203","severity":1,"message":"236","line":16,"column":3,"nodeType":"205","messageId":"206","endLine":16,"endColumn":11},{"ruleId":"237","severity":1,"message":"238","line":323,"column":6,"nodeType":"239","endLine":323,"endColumn":8,"suggestions":"240"},{"ruleId":"203","severity":1,"message":"241","line":2,"column":76,"nodeType":"205","messageId":"206","endLine":2,"endColumn":81},{"ruleId":"242","severity":1,"message":"243","line":450,"column":32,"nodeType":"244","messageId":"223","endLine":450,"endColumn":34},{"ruleId":"203","severity":1,"message":"245","line":5,"column":3,"nodeType":"205","messageId":"206","endLine":5,"endColumn":13},{"ruleId":"203","severity":1,"message":"246","line":6,"column":3,"nodeType":"205","messageId":"206","endLine":6,"endColumn":8},{"ruleId":"203","severity":1,"message":"247","line":20,"column":18,"nodeType":"205","messageId":"206","endLine":20,"endColumn":24},{"ruleId":"203","severity":1,"message":"248","line":115,"column":10,"nodeType":"205","messageId":"206","endLine":115,"endColumn":18},{"ruleId":"203","severity":1,"message":"249","line":115,"column":20,"nodeType":"205","messageId":"206","endLine":115,"endColumn":31},{"ruleId":"203","severity":1,"message":"250","line":116,"column":10,"nodeType":"205","messageId":"206","endLine":116,"endColumn":14},{"ruleId":"237","severity":1,"message":"238","line":143,"column":6,"nodeType":"239","endLine":143,"endColumn":8,"suggestions":"251"},{"ruleId":"203","severity":1,"message":"252","line":212,"column":9,"nodeType":"205","messageId":"206","endLine":212,"endColumn":20},{"ruleId":"203","severity":1,"message":"253","line":216,"column":9,"nodeType":"205","messageId":"206","endLine":216,"endColumn":20},{"ruleId":"203","severity":1,"message":"234","line":15,"column":3,"nodeType":"205","messageId":"206","endLine":15,"endColumn":12},{"ruleId":"203","severity":1,"message":"254","line":20,"column":8,"nodeType":"205","messageId":"206","endLine":20,"endColumn":18},{"ruleId":"242","severity":1,"message":"243","line":154,"column":28,"nodeType":"244","messageId":"223","endLine":154,"endColumn":30},{"ruleId":"237","severity":1,"message":"238","line":537,"column":6,"nodeType":"239","endLine":537,"endColumn":8,"suggestions":"255"},{"ruleId":"242","severity":1,"message":"243","line":553,"column":33,"nodeType":"244","messageId":"223","endLine":553,"endColumn":35},{"ruleId":"242","severity":1,"message":"243","line":559,"column":33,"nodeType":"244","messageId":"223","endLine":559,"endColumn":35},{"ruleId":"242","severity":1,"message":"243","line":565,"column":32,"nodeType":"244","messageId":"223","endLine":565,"endColumn":34},{"ruleId":"237","severity":1,"message":"256","line":16,"column":6,"nodeType":"239","endLine":16,"endColumn":8,"suggestions":"257"},{"ruleId":"203","severity":1,"message":"258","line":1,"column":20,"nodeType":"205","messageId":"206","endLine":1,"endColumn":25},{"ruleId":"203","severity":1,"message":"231","line":7,"column":3,"nodeType":"205","messageId":"206","endLine":7,"endColumn":17},{"ruleId":"203","severity":1,"message":"208","line":10,"column":3,"nodeType":"205","messageId":"206","endLine":10,"endColumn":12},{"ruleId":"203","severity":1,"message":"232","line":13,"column":3,"nodeType":"205","messageId":"206","endLine":13,"endColumn":9},{"ruleId":"203","severity":1,"message":"234","line":15,"column":3,"nodeType":"205","messageId":"206","endLine":15,"endColumn":12},{"ruleId":"203","severity":1,"message":"235","line":16,"column":3,"nodeType":"205","messageId":"206","endLine":16,"endColumn":11},{"ruleId":"203","severity":1,"message":"247","line":29,"column":19,"nodeType":"205","messageId":"206","endLine":29,"endColumn":25},{"ruleId":"237","severity":1,"message":"238","line":669,"column":6,"nodeType":"239","endLine":669,"endColumn":8,"suggestions":"259"},{"ruleId":"203","severity":1,"message":"231","line":7,"column":3,"nodeType":"205","messageId":"206","endLine":7,"endColumn":17},{"ruleId":"203","severity":1,"message":"208","line":10,"column":3,"nodeType":"205","messageId":"206","endLine":10,"endColumn":12},{"ruleId":"203","severity":1,"message":"232","line":13,"column":3,"nodeType":"205","messageId":"206","endLine":13,"endColumn":9},{"ruleId":"203","severity":1,"message":"233","line":14,"column":3,"nodeType":"205","messageId":"206","endLine":14,"endColumn":19},{"ruleId":"203","severity":1,"message":"234","line":15,"column":3,"nodeType":"205","messageId":"206","endLine":15,"endColumn":12},{"ruleId":"203","severity":1,"message":"235","line":16,"column":3,"nodeType":"205","messageId":"206","endLine":16,"endColumn":11},{"ruleId":"203","severity":1,"message":"260","line":20,"column":10,"nodeType":"205","messageId":"206","endLine":20,"endColumn":19},{"ruleId":"203","severity":1,"message":"247","line":29,"column":19,"nodeType":"205","messageId":"206","endLine":29,"endColumn":25},{"ruleId":"203","severity":1,"message":"261","line":82,"column":7,"nodeType":"205","messageId":"206","endLine":82,"endColumn":18},{"ruleId":"203","severity":1,"message":"262","line":399,"column":9,"nodeType":"205","messageId":"206","endLine":399,"endColumn":17},{"ruleId":"203","severity":1,"message":"263","line":620,"column":10,"nodeType":"205","messageId":"206","endLine":620,"endColumn":20},{"ruleId":"203","severity":1,"message":"264","line":621,"column":25,"nodeType":"205","messageId":"206","endLine":621,"endColumn":41},{"ruleId":"237","severity":1,"message":"238","line":644,"column":6,"nodeType":"239","endLine":644,"endColumn":8,"suggestions":"265"},{"ruleId":"203","severity":1,"message":"266","line":1,"column":22,"nodeType":"205","messageId":"206","endLine":1,"endColumn":31},{"ruleId":"203","severity":1,"message":"246","line":6,"column":3,"nodeType":"205","messageId":"206","endLine":6,"endColumn":8},{"ruleId":"237","severity":1,"message":"238","line":57,"column":6,"nodeType":"239","endLine":57,"endColumn":8,"suggestions":"267"},{"ruleId":"203","severity":1,"message":"234","line":15,"column":3,"nodeType":"205","messageId":"206","endLine":15,"endColumn":12},{"ruleId":"203","severity":1,"message":"254","line":21,"column":8,"nodeType":"205","messageId":"206","endLine":21,"endColumn":18},{"ruleId":"237","severity":1,"message":"238","line":719,"column":6,"nodeType":"239","endLine":719,"endColumn":8,"suggestions":"268"},{"ruleId":"242","severity":1,"message":"243","line":735,"column":33,"nodeType":"244","messageId":"223","endLine":735,"endColumn":35},{"ruleId":"242","severity":1,"message":"243","line":741,"column":33,"nodeType":"244","messageId":"223","endLine":741,"endColumn":35},{"ruleId":"242","severity":1,"message":"243","line":747,"column":32,"nodeType":"244","messageId":"223","endLine":747,"endColumn":34},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'TITLE' is assigned a value but never used.","'TextField' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'feedback' is defined but never used.","'Feedback' is defined but never used.","'Clients' is defined but never used.","'clients' is defined but never used.","'quotes' is defined but never used.","'Footer' is defined but never used.","'stats' is assigned a value but never used.","'features' is assigned a value but never used.","no-dupe-keys","Duplicate key 'topPadding'.","ObjectExpression","unexpected","Duplicate key 'leftSection'.","Duplicate key 'button'.","'classes' is assigned a value but never used.","'isSmallScreen' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["271"],"'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Typography' is defined but never used.","'Modal' is defined but never used.","'server' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["272"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'Pagination' is defined but never used.",["273"],"React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.",["274"],"'Slide' is defined but never used.",["275"],"'useParams' is defined but never used.","'FilterPopup' is assigned a value but never used.","'colorSet' is assigned a value but never used.","'filterOpen' is assigned a value but never used.","'setSearchOptions' is assigned a value but never used.",["276"],"'useEffect' is defined but never used.",["277"],["278"],"no-global-assign","no-unsafe-negation",{"desc":"279","fix":"280"},{"desc":"279","fix":"281"},{"desc":"279","fix":"282"},{"desc":"283","fix":"284"},{"desc":"279","fix":"285"},{"desc":"279","fix":"286"},{"desc":"279","fix":"287"},{"desc":"279","fix":"288"},"Update the dependencies array to be: [getData]",{"range":"289","text":"290"},{"range":"291","text":"290"},{"range":"292","text":"290"},"Update the dependencies array to be: [setPopup]",{"range":"293","text":"294"},{"range":"295","text":"290"},{"range":"296","text":"290"},{"range":"297","text":"290"},{"range":"298","text":"290"},[8889,8891],"[getData]",[3668,3670],[16631,16633],[437,439],"[setPopup]",[20021,20023],[19544,19546],[1218,1220],[22307,22309]]
>>>>>>> ce942467c63a9c6a75c15f1bd7e9903276970d88
