[{"D:\\React\\IT_CONNECT\\frontend\\src\\index.js":"1","D:\\React\\IT_CONNECT\\frontend\\src\\App.js":"2","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Navbar.js":"3","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Login.js":"4","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Welcome.js":"5","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Applications.js":"6","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Signup.js":"7","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Profile.js":"8","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Home.js":"9","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Logout.js":"10","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js":"11","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js":"12","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"13","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js":"14","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js":"15","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js":"16","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js":"17","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\apiList.js":"18","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js":"19","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Clients.js":"20","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Feedback.js":"21","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js":"22","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Footer.js":"23","D:\\React\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js":"24","D:\\React\\IT_CONNECT\\frontend\\src\\assets\\index.js":"25","D:\\React\\IT_CONNECT\\frontend\\src\\constants\\index.js":"26"},{"size":230,"mtime":1694091397801,"results":"27","hashOfConfig":"28"},{"size":3507,"mtime":1699699372733,"results":"29","hashOfConfig":"28"},{"size":3848,"mtime":1699699380503,"results":"30","hashOfConfig":"28"},{"size":4107,"mtime":1694112419545,"results":"31","hashOfConfig":"28"},{"size":10061,"mtime":1699699380516,"results":"32","hashOfConfig":"28"},{"size":10089,"mtime":1699712623858,"results":"33","hashOfConfig":"28"},{"size":14123,"mtime":1694091397725,"results":"34","hashOfConfig":"28"},{"size":10765,"mtime":1698685716407,"results":"35","hashOfConfig":"28"},{"size":21577,"mtime":1699712623866,"results":"36","hashOfConfig":"28"},{"size":509,"mtime":1694091397723,"results":"37","hashOfConfig":"28"},{"size":523,"mtime":1694091397804,"results":"38","hashOfConfig":"28"},{"size":23207,"mtime":1699699372751,"results":"39","hashOfConfig":"28"},{"size":21682,"mtime":1699708516716,"results":"40","hashOfConfig":"28"},{"size":8342,"mtime":1699708513912,"results":"41","hashOfConfig":"28"},{"size":4491,"mtime":1699712680111,"results":"42","hashOfConfig":"28"},{"size":174,"mtime":1694091397806,"results":"43","hashOfConfig":"28"},{"size":26811,"mtime":1699712720730,"results":"44","hashOfConfig":"28"},{"size":521,"mtime":1694091397805,"results":"45","hashOfConfig":"28"},{"size":1210,"mtime":1694091397802,"results":"46","hashOfConfig":"28"},{"size":592,"mtime":1694095245899,"results":"47","hashOfConfig":"28"},{"size":762,"mtime":1694096513446,"results":"48","hashOfConfig":"28"},{"size":1704,"mtime":1694091397805,"results":"49","hashOfConfig":"28"},{"size":1692,"mtime":1694106620215,"results":"50","hashOfConfig":"28"},{"size":3231,"mtime":1694091397803,"results":"51","hashOfConfig":"28"},{"size":1181,"mtime":1693921201145,"results":"52","hashOfConfig":"28"},{"size":4362,"mtime":1694101908044,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"il2hec",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\IT_CONNECT\\frontend\\src\\index.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\App.js",["110","111"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Navbar.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Login.js",["112","113"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Welcome.js",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Applications.js",["131","132","133","134","135","136","137","138"],"import {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport { SetPopupContext } from \"../App\";\r\nimport apiList from \"../lib/apiList\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 3px 6px rgba(0, 0, 0, 0.16)\",\r\n    transition: \"transform 0.2s ease-in-out\",\r\n    \"&:hover\": {\r\n      transform: \"scale(1.02)\",\r\n    },\r\n  },\r\n  jobTitle: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.25rem\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  statusBlock: {\r\n    width: \"fit-content\",\r\n    padding: \"5px 10px\",\r\n    borderRadius: \"5px\",\r\n    color: \"white\",\r\n    textTransform: \"uppercase\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  dateInfo: {\r\n    fontSize: \"0.875rem\",\r\n    color: \"#888\",\r\n    marginTop: \"5px\",\r\n  },\r\n  chip: {\r\n    marginRight: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  rateButton: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  modalPaper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    outline: \"none\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  modalCloseButton: {\r\n    position: \"absolute\",\r\n    top: \"10px\",\r\n    right: \"10px\",\r\n  },\r\n  ratingLabel: {\r\n    fontSize: \"1rem\",\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"10px\",\r\n  },\r\n  ratingSlider: {\r\n    width: \"80%\",\r\n  },\r\n  rateSubmitButton: {\r\n    marginTop: \"10px\",\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n        <Grid item>\r\n              <Typography variant=\"h5\" className={classes.jobTitle}>\r\n                {application.job.title}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"subtitle2\">\r\n                Posted By: {application.recruiter.name}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"subtitle2\">Role: {application.job.jobType}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"subtitle2\">\r\n                Salary: &#8377; {application.job.salary} per month\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"subtitle2\">\r\n                Duration:{\" \"}\r\n                {application.job.duration !== 0\r\n                  ? `${application.job.duration} month`\r\n                  : `Flexible`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <div>\r\n                {application.job.skillsets.map((skill) => (\r\n                  <Chip\r\n                    key={skill}\r\n                    label={skill}\r\n                    className={classes.chip}\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n              </div>\r\n            </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n              Applied On: {appliedOn.toLocaleDateString()}\r\n            </Typography>\r\n            {application.status === \"accepted\" ||\r\n            application.status === \"finished\" ? (\r\n              <Typography variant=\"subtitle2\" className={classes.dateInfo}>\r\n                Joined On: {joinedOn.toLocaleDateString()}\r\n              </Typography>\r\n            ) : null}\r\n            {/* Move the status block here */}\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.dateInfo}\r\n              style={{\r\n                color: colorSet[application.status],\r\n                marginTop: \"5px\",\r\n                fontWeight: \"bold\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {application.status}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n            <Grid item xs>\r\n              <Paper\r\n                className={classes.statusBlock}\r\n                style={{\r\n                  background: colorSet[application.status],\r\n                  color: \"#ffffff\",\r\n                }}\r\n              >\r\n                {application.status}\r\n              </Paper>\r\n            </Grid>\r\n            {application.status === \"accepted\" ||\r\n            application.status === \"finished\" ? (\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.rateButton}\r\n                  onClick={() => {\r\n                    fetchRating();\r\n                    setOpen(true);\r\n                  }}\r\n                >\r\n                  Rate Job\r\n                </Button>\r\n              </Grid>\r\n            ) : null}\r\n          </Grid>\r\n      </Grid>\r\n      {/* ... (Remaining code remains unchanged) */}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n    container\r\n    item\r\n    direction=\"column\"\r\n    alignItems=\"center\"\r\n    style={{\r\n      padding: \"30px\",\r\n      minHeight: \"93vh\",\r\n      backgroundColor: \"#f2f2f2\",\r\n    }}\r\n  >\r\n    <Grid item>\r\n      <Typography variant=\"h2\" style={{ color: \"#333\", fontWeight: \"bold\" }}>\r\n        Applications\r\n      </Typography>\r\n    </Grid>\r\n\r\n    <Grid\r\n      container\r\n      item\r\n      xs\r\n      direction=\"row\"\r\n      spacing={2} // Adjust the spacing as needed\r\n      style={{ width: \"100%\" }}\r\n      alignItems=\"stretch\"\r\n      justify=\"center\"\r\n    >\r\n      {applications.length > 0 ? (\r\n        applications.map((obj, index) => (\r\n          <Grid item key={obj._id} xs={12} sm={6} md={4}> {/* Adjust the xs, sm, md values based on your design */}\r\n            <ApplicationTile application={obj} />\r\n          </Grid>\r\n        ))\r\n      ) : (\r\n        <Typography\r\n          variant=\"h5\"\r\n          style={{\r\n            height: \"50px\",\r\n            textAlign: \"center\",\r\n            background: \"rgba(255,255,255,0.5)\",\r\n            marginLeft: \"25%\",\r\n            marginRight: \"25%\",\r\n            paddingTop: \"15px\",\r\n          }}\r\n        >\r\n          No Applications Found\r\n        </Typography>\r\n      )}\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n",["139","140"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Signup.js",["141","142"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Profile.js",["143","144","145","146","147","148","149","150","151"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Home.js",["152","153","154","155","156","157","158"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n    <Typography variant=\"h5\">{job.title}</Typography>\r\n    <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n    <div>Role: {job.jobType}</div>\r\n    <div>Salary: &#8377; {job.salary} per month</div>\r\n    <div>\r\n      Duration: {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\r\n    </div>\r\n    <div>Posted By: {job.recruiter.name}</div>\r\n    <div>Application Deadline: {deadline}</div>\r\n\r\n    <div>\r\n      {job.skillsets.map((skill) => (\r\n        <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n      ))}\r\n    </div>\r\n\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      className={classes.button}\r\n      onClick={() => setOpen(true)}\r\n      disabled={userType() === \"recruiter\"}\r\n    >\r\n      Apply\r\n    </Button>\r\n\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n != \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n  </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item xs>\r\n            <Typography variant=\"h2\" style={{color:\"white\",fontWeight:\"bold\"}}>Jobs</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4} lg={3}>\r\n  <TextField\r\n    label=\"Search Jobs\"\r\n    value={searchOptions.query}\r\n    onChange={(event) =>\r\n      setSearchOptions({\r\n        ...searchOptions,\r\n        query: event.target.value,\r\n      })\r\n    }\r\n    onKeyPress={(ev) => {\r\n      if (ev.key === \"Enter\") {\r\n        getData();\r\n      }\r\n    }}\r\n    InputProps={{\r\n      endAdornment: (\r\n        <InputAdornment>\r\n          <IconButton onClick={() => getData()}>\r\n            <SearchIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      ),\r\n    }}\r\n    style={{ width: \"100%\", maxWidth: \"500px\", backgroundColor: \"white\", borderRadius: \"12px\" }}\r\n    variant=\"outlined\"\r\n  />\r\n</Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {jobs.length > 0 ? (\r\n          // Use the Grid component to arrange JobTile instances in rows of three\r\n          <Grid container spacing={3}>\r\n            {jobs.map((job, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <JobTile job={job} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n              marginLeft: \"25%\",\r\n              marginRight: \"25%\",\r\n              paddingTop: \"15px\",\r\n            }}\r\n          >\r\n            No jobs found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n        {/* <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\Logout.js",["159"],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\MessagePopup.js",["160"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\JobApplications.js",["161","162","163","164","165","166","167"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["168","169","170","171","172","173","174","175","176","177","178","179","180"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  \r\n  popupDialog: {\r\n    \r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"20px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexGrow: 1,\r\n  },\r\n  cardButtons: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: \"10px\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n  root: {\r\n    padding: \"30px\",\r\n    minHeight: \"93vh\",\r\n  },\r\n}));\r\n\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, applicantId: application.jobApplicant.userId },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      window.open(address)\r\n      // axios(address, {\r\n      //   method: \"GET\",\r\n      //   responseType: \"blob\",\r\n      // })\r\n      //   .then((response) => {\r\n      //     const file = new Blob([response.data], { type: \"application/pdf\" });\r\n      //     const fileURL = URL.createObjectURL(file);\r\n      //     window.open(fileURL);\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.log(error);\r\n      //     setPopup({\r\n      //       open: true,\r\n      //       severity: \"error\",\r\n      //       message: \"Error\",\r\n      //     });\r\n      //   });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n\r\n  return (\r\n\r\n\r\n\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Avatar src={`${application.jobApplicant.profile}`} className={classes.avatar} />\r\n\r\n      <div className={classes.cardContent}>\r\n        <Typography variant=\"h5\">{application.jobApplicant.name}</Typography>\r\n        <Rating\r\n          value={application.jobApplicant.rating !== -1 ? application.jobApplicant.rating : null}\r\n          readOnly\r\n        />\r\n        <Typography>Job Title: {application.job.title}</Typography>\r\n        <Typography>Role: {application.job.jobType}</Typography>\r\n        <Typography>Applied On: {appliedOn.toLocaleDateString()}</Typography>\r\n        <Typography>SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}</Typography>\r\n        {application.jobApplicant.skills.map((skill, index) => (\r\n          <Chip label={skill} style={{ marginRight: \"2px\" }} key={index} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className={classes.cardButtons}>\r\n  <Button\r\n    variant=\"contained\"\r\n    className={classes.statusBlock}\r\n    color=\"primary\"\r\n    onClick={() => getResume()}\r\n    style={{ marginRight: '8px' }} // Add margin to the right\r\n  >\r\n    Resume\r\n  </Button>\r\n\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    className={classes.statusBlock}\r\n    style={{\r\n      background: \"#09BC8A\",\r\n      marginRight: '8px', // Add margin to the right\r\n    }}\r\n    onClick={() => {\r\n      setOpenEndJob(true);\r\n    }}\r\n  >\r\n    Fire\r\n  </Button>\r\n\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    className={classes.statusBlock}\r\n    onClick={() => {\r\n      setOpen(true);\r\n    }}\r\n  >\r\n    Rate\r\n  </Button>\r\n</div>\r\n\r\n\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal open={openEndJob} onClose={handleCloseEndJob} className={classes.popupDialog}>\r\n        {/* ... (same as before) */}\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n\r\n\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography variant=\"h2\" style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n        Employees\r\n      </Typography>\r\n      <IconButton onClick={() => setFilterOpen(true)}>\r\n        <FilterListIcon />\r\n      </IconButton>\r\n      <Grid container spacing={2}>\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item xs={12} sm={6} md={4} key={obj._id}>\r\n              <ApplicationTile application={obj} getData={getData} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography\r\n            variant=\"h5\"\r\n            style={{\r\n              height: \"50px\",\r\n              textAlign: \"center\",\r\n              background: \"rgba(255,255,255,0.5)\",\r\n            }}\r\n          >\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\CreateJobs.js",["181","182"],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\Profile.js",["183"],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\isAuth.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\recruiter\\MyJobs.js",["184","185","186","187","188","189"],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\apiList.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\EmailInput.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Clients.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Feedback.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\component\\Footer.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\lib\\FileUploadInput.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\assets\\index.js",[],"D:\\React\\IT_CONNECT\\frontend\\src\\constants\\index.js",[],{"ruleId":"190","severity":1,"message":"191","line":19,"column":8,"nodeType":"192","messageId":"193","endLine":19,"endColumn":14},{"ruleId":"190","severity":1,"message":"194","line":36,"column":7,"nodeType":"192","messageId":"193","endLine":36,"endColumn":12},{"ruleId":"190","severity":1,"message":"195","line":4,"column":3,"nodeType":"192","messageId":"193","endLine":4,"endColumn":12},{"ruleId":"196","severity":1,"message":"197","line":113,"column":9,"nodeType":"198","endLine":114,"endColumn":41},{"ruleId":"190","severity":1,"message":"199","line":2,"column":28,"nodeType":"192","messageId":"193","endLine":2,"endColumn":32},{"ruleId":"190","severity":1,"message":"200","line":2,"column":34,"nodeType":"192","messageId":"193","endLine":2,"endColumn":45},{"ruleId":"190","severity":1,"message":"201","line":2,"column":59,"nodeType":"192","messageId":"193","endLine":2,"endColumn":65},{"ruleId":"190","severity":1,"message":"202","line":9,"column":10,"nodeType":"192","messageId":"193","endLine":9,"endColumn":18},{"ruleId":"190","severity":1,"message":"203","line":10,"column":8,"nodeType":"192","messageId":"193","endLine":10,"endColumn":16},{"ruleId":"190","severity":1,"message":"204","line":11,"column":8,"nodeType":"192","messageId":"193","endLine":11,"endColumn":15},{"ruleId":"190","severity":1,"message":"205","line":12,"column":10,"nodeType":"192","messageId":"193","endLine":12,"endColumn":17},{"ruleId":"190","severity":1,"message":"206","line":13,"column":10,"nodeType":"192","messageId":"193","endLine":13,"endColumn":16},{"ruleId":"190","severity":1,"message":"207","line":14,"column":8,"nodeType":"192","messageId":"193","endLine":14,"endColumn":14},{"ruleId":"190","severity":1,"message":"208","line":32,"column":7,"nodeType":"192","messageId":"193","endLine":32,"endColumn":12},{"ruleId":"190","severity":1,"message":"209","line":50,"column":7,"nodeType":"192","messageId":"193","endLine":50,"endColumn":15},{"ruleId":"210","severity":1,"message":"211","line":96,"column":3,"nodeType":"212","messageId":"213","endLine":96,"endColumn":13},{"ruleId":"210","severity":1,"message":"214","line":106,"column":3,"nodeType":"212","messageId":"213","endLine":106,"endColumn":14},{"ruleId":"210","severity":1,"message":"215","line":109,"column":3,"nodeType":"212","messageId":"213","endLine":109,"endColumn":9},{"ruleId":"190","severity":1,"message":"216","line":120,"column":9,"nodeType":"192","messageId":"193","endLine":120,"endColumn":16},{"ruleId":"190","severity":1,"message":"217","line":122,"column":9,"nodeType":"192","messageId":"193","endLine":122,"endColumn":22},{"ruleId":"218","severity":1,"message":"219","line":140,"column":11,"nodeType":"198","endLine":140,"endColumn":55},{"ruleId":"190","severity":1,"message":"220","line":6,"column":3,"nodeType":"192","messageId":"193","endLine":6,"endColumn":17},{"ruleId":"190","severity":1,"message":"195","line":9,"column":3,"nodeType":"192","messageId":"193","endLine":9,"endColumn":12},{"ruleId":"190","severity":1,"message":"221","line":12,"column":3,"nodeType":"192","messageId":"193","endLine":12,"endColumn":9},{"ruleId":"190","severity":1,"message":"222","line":13,"column":3,"nodeType":"192","messageId":"193","endLine":13,"endColumn":19},{"ruleId":"190","severity":1,"message":"223","line":14,"column":3,"nodeType":"192","messageId":"193","endLine":14,"endColumn":12},{"ruleId":"190","severity":1,"message":"224","line":15,"column":3,"nodeType":"192","messageId":"193","endLine":15,"endColumn":11},{"ruleId":"190","severity":1,"message":"225","line":16,"column":3,"nodeType":"192","messageId":"193","endLine":16,"endColumn":11},{"ruleId":"226","severity":1,"message":"227","line":321,"column":6,"nodeType":"228","endLine":321,"endColumn":8,"suggestions":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"190","severity":1,"message":"234","line":2,"column":68,"nodeType":"192","messageId":"193","endLine":2,"endColumn":73},{"ruleId":"235","severity":1,"message":"236","line":450,"column":32,"nodeType":"237","messageId":"213","endLine":450,"endColumn":34},{"ruleId":"190","severity":1,"message":"238","line":5,"column":3,"nodeType":"192","messageId":"193","endLine":5,"endColumn":13},{"ruleId":"190","severity":1,"message":"239","line":6,"column":3,"nodeType":"192","messageId":"193","endLine":6,"endColumn":8},{"ruleId":"190","severity":1,"message":"240","line":20,"column":18,"nodeType":"192","messageId":"193","endLine":20,"endColumn":24},{"ruleId":"190","severity":1,"message":"241","line":115,"column":10,"nodeType":"192","messageId":"193","endLine":115,"endColumn":18},{"ruleId":"190","severity":1,"message":"242","line":115,"column":20,"nodeType":"192","messageId":"193","endLine":115,"endColumn":31},{"ruleId":"190","severity":1,"message":"243","line":116,"column":10,"nodeType":"192","messageId":"193","endLine":116,"endColumn":14},{"ruleId":"226","severity":1,"message":"227","line":143,"column":6,"nodeType":"228","endLine":143,"endColumn":8,"suggestions":"244"},{"ruleId":"190","severity":1,"message":"245","line":212,"column":9,"nodeType":"192","messageId":"193","endLine":212,"endColumn":20},{"ruleId":"190","severity":1,"message":"246","line":216,"column":9,"nodeType":"192","messageId":"193","endLine":216,"endColumn":20},{"ruleId":"190","severity":1,"message":"223","line":15,"column":3,"nodeType":"192","messageId":"193","endLine":15,"endColumn":12},{"ruleId":"190","severity":1,"message":"247","line":20,"column":8,"nodeType":"192","messageId":"193","endLine":20,"endColumn":18},{"ruleId":"235","severity":1,"message":"236","line":165,"column":28,"nodeType":"237","messageId":"213","endLine":165,"endColumn":30},{"ruleId":"226","severity":1,"message":"227","line":548,"column":6,"nodeType":"228","endLine":548,"endColumn":8,"suggestions":"248"},{"ruleId":"235","severity":1,"message":"236","line":564,"column":33,"nodeType":"237","messageId":"213","endLine":564,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":570,"column":33,"nodeType":"237","messageId":"213","endLine":570,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":576,"column":32,"nodeType":"237","messageId":"213","endLine":576,"endColumn":34},{"ruleId":"226","severity":1,"message":"249","line":16,"column":6,"nodeType":"228","endLine":16,"endColumn":8,"suggestions":"250"},{"ruleId":"190","severity":1,"message":"251","line":1,"column":20,"nodeType":"192","messageId":"193","endLine":1,"endColumn":25},{"ruleId":"190","severity":1,"message":"220","line":7,"column":3,"nodeType":"192","messageId":"193","endLine":7,"endColumn":17},{"ruleId":"190","severity":1,"message":"195","line":10,"column":3,"nodeType":"192","messageId":"193","endLine":10,"endColumn":12},{"ruleId":"190","severity":1,"message":"221","line":13,"column":3,"nodeType":"192","messageId":"193","endLine":13,"endColumn":9},{"ruleId":"190","severity":1,"message":"223","line":15,"column":3,"nodeType":"192","messageId":"193","endLine":15,"endColumn":12},{"ruleId":"190","severity":1,"message":"224","line":16,"column":3,"nodeType":"192","messageId":"193","endLine":16,"endColumn":11},{"ruleId":"190","severity":1,"message":"240","line":29,"column":19,"nodeType":"192","messageId":"193","endLine":29,"endColumn":25},{"ruleId":"226","severity":1,"message":"227","line":669,"column":6,"nodeType":"228","endLine":669,"endColumn":8,"suggestions":"252"},{"ruleId":"190","severity":1,"message":"220","line":7,"column":3,"nodeType":"192","messageId":"193","endLine":7,"endColumn":17},{"ruleId":"190","severity":1,"message":"195","line":10,"column":3,"nodeType":"192","messageId":"193","endLine":10,"endColumn":12},{"ruleId":"190","severity":1,"message":"221","line":13,"column":3,"nodeType":"192","messageId":"193","endLine":13,"endColumn":9},{"ruleId":"190","severity":1,"message":"222","line":14,"column":3,"nodeType":"192","messageId":"193","endLine":14,"endColumn":19},{"ruleId":"190","severity":1,"message":"223","line":15,"column":3,"nodeType":"192","messageId":"193","endLine":15,"endColumn":12},{"ruleId":"190","severity":1,"message":"224","line":16,"column":3,"nodeType":"192","messageId":"193","endLine":16,"endColumn":11},{"ruleId":"190","severity":1,"message":"253","line":20,"column":10,"nodeType":"192","messageId":"193","endLine":20,"endColumn":19},{"ruleId":"190","severity":1,"message":"240","line":29,"column":19,"nodeType":"192","messageId":"193","endLine":29,"endColumn":25},{"ruleId":"190","severity":1,"message":"254","line":82,"column":7,"nodeType":"192","messageId":"193","endLine":82,"endColumn":18},{"ruleId":"190","severity":1,"message":"255","line":399,"column":9,"nodeType":"192","messageId":"193","endLine":399,"endColumn":17},{"ruleId":"190","severity":1,"message":"256","line":620,"column":10,"nodeType":"192","messageId":"193","endLine":620,"endColumn":20},{"ruleId":"190","severity":1,"message":"257","line":621,"column":25,"nodeType":"192","messageId":"193","endLine":621,"endColumn":41},{"ruleId":"226","severity":1,"message":"227","line":644,"column":6,"nodeType":"228","endLine":644,"endColumn":8,"suggestions":"258"},{"ruleId":"190","severity":1,"message":"259","line":1,"column":22,"nodeType":"192","messageId":"193","endLine":1,"endColumn":31},{"ruleId":"190","severity":1,"message":"239","line":6,"column":3,"nodeType":"192","messageId":"193","endLine":6,"endColumn":8},{"ruleId":"226","severity":1,"message":"227","line":57,"column":6,"nodeType":"228","endLine":57,"endColumn":8,"suggestions":"260"},{"ruleId":"190","severity":1,"message":"223","line":15,"column":3,"nodeType":"192","messageId":"193","endLine":15,"endColumn":12},{"ruleId":"190","severity":1,"message":"247","line":21,"column":8,"nodeType":"192","messageId":"193","endLine":21,"endColumn":18},{"ruleId":"226","severity":1,"message":"227","line":713,"column":6,"nodeType":"228","endLine":713,"endColumn":8,"suggestions":"261"},{"ruleId":"235","severity":1,"message":"236","line":729,"column":33,"nodeType":"237","messageId":"213","endLine":729,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":735,"column":33,"nodeType":"237","messageId":"213","endLine":735,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":741,"column":32,"nodeType":"237","messageId":"213","endLine":741,"endColumn":34},"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'TITLE' is assigned a value but never used.","'TextField' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Card' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'feedback' is defined but never used.","'Feedback' is defined but never used.","'Clients' is defined but never used.","'clients' is defined but never used.","'quotes' is defined but never used.","'Footer' is defined but never used.","'stats' is assigned a value but never used.","'features' is assigned a value but never used.","no-dupe-keys","Duplicate key 'topPadding'.","ObjectExpression","unexpected","Duplicate key 'leftSection'.","Duplicate key 'button'.","'classes' is assigned a value but never used.","'isSmallScreen' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["262"],"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'Typography' is defined but never used.","'Modal' is defined but never used.","'server' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["265"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'Pagination' is defined but never used.",["266"],"React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.",["267"],"'Slide' is defined but never used.",["268"],"'useParams' is defined but never used.","'FilterPopup' is assigned a value but never used.","'colorSet' is assigned a value but never used.","'filterOpen' is assigned a value but never used.","'setSearchOptions' is assigned a value but never used.",["269"],"'useEffect' is defined but never used.",["270"],["271"],{"desc":"272","fix":"273"},"no-global-assign","no-unsafe-negation",{"desc":"272","fix":"274"},{"desc":"272","fix":"275"},{"desc":"276","fix":"277"},{"desc":"272","fix":"278"},{"desc":"272","fix":"279"},{"desc":"272","fix":"280"},{"desc":"272","fix":"281"},"Update the dependencies array to be: [getData]",{"range":"282","text":"283"},{"range":"284","text":"283"},{"range":"285","text":"283"},"Update the dependencies array to be: [setPopup]",{"range":"286","text":"287"},{"range":"288","text":"283"},{"range":"289","text":"283"},{"range":"290","text":"283"},{"range":"291","text":"283"},[8742,8744],"[getData]",[3668,3670],[17125,17127],[437,439],"[setPopup]",[20021,20023],[19544,19546],[1218,1220],[22183,22185]]